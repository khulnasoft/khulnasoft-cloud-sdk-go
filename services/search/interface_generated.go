/*
 * Copyright Â© 2024 KhulnaSoft, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

// Code generated by gen_interface.go. DO NOT EDIT.

package search

import (
	"net/http"
)

// ServicerGenerated represents the interface for implementing all endpoints for this service
type ServicerGenerated interface {
	/*
		CreateDataset - search service endpoint
		Creates a dataset.
		Parameters:
			datasetPost
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	CreateDataset(datasetPost DatasetPost, resp ...*http.Response) (*Dataset, error)
	/*
		CreateFederatedConnection - search service endpoint
		Creates a new federated connection with information about how to connect to a remote index.
		Parameters:
			federatedConnectionInput
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	CreateFederatedConnection(federatedConnectionInput FederatedConnectionInput, resp ...*http.Response) (*FederatedConnection, error)
	/*
		CreateJob - search service endpoint
		Creates a search job.
		Parameters:
			searchJob
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	CreateJob(searchJob SearchJob, resp ...*http.Response) (*SearchJob, error)
	/*
		DeleteDatasetById - search service endpoint
		Deletes a dataset with a specified dataset ID (datasetid).
		Parameters:
			datasetid: The dataset ID.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	DeleteDatasetById(datasetid string, resp ...*http.Response) error
	/*
		DeleteFederatedConnection - search service endpoint
		Deletes a federated connection with the specified name (connectionName)
		Parameters:
			connectionName: The name of the federated connection.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	DeleteFederatedConnection(connectionName string, resp ...*http.Response) error
	/*
		DeleteJob - search service endpoint
		Creates a search job that deletes events from an index. The events are deleted from the index in the specified module, based on the search criteria as specified by the predicate.
		Parameters:
			deleteSearchJob
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	DeleteJob(deleteSearchJob DeleteSearchJob, resp ...*http.Response) (*DeleteSearchJob, error)
	/*
		ExportResults - search service endpoint
		Exports the search results for the job with the specified search ID (SID). Export the results as a CSV file or JSON file.
		Parameters:
			sid: The search ID.
			query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	ExportResults(sid string, query *ExportResultsQueryParams, resp ...*http.Response) (*map[string]interface{}, error)
	/*
		GetAllFederatedConnections - search service endpoint
		Returns all federated connections.
		Parameters:
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	GetAllFederatedConnections(resp ...*http.Response) (*ListFederatedConnections, error)
	/*
		GetDatasetById - search service endpoint
		Returns a dataset with a specified dataset ID (datasetid).
		Parameters:
			datasetid: The dataset ID.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	GetDatasetById(datasetid string, resp ...*http.Response) (*Dataset, error)
	/*
		GetFederatedConnectionByName - search service endpoint
		Returns the federated connection with the specified name (connectionName).
		Parameters:
			connectionName: The name of the federated connection.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	GetFederatedConnectionByName(connectionName string, resp ...*http.Response) (*FederatedConnection, error)
	/*
		GetJob - search service endpoint
		Returns the search job with the specified search ID (SID).
		Parameters:
			sid: The search ID.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	GetJob(sid string, resp ...*http.Response) (*SearchJob, error)
	/*
		ListDatasets - search service endpoint
		Returns a list of all datasets.
		Parameters:
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	ListDatasets(resp ...*http.Response) (*ListDatasets, error)
	/*
		ListEventsSummary - search service endpoint
		Returns an events summary for search ID (SID) search.
		Parameters:
			sid: The search ID.
			query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	ListEventsSummary(sid string, query *ListEventsSummaryQueryParams, resp ...*http.Response) (*ListSearchResultsResponse, error)
	/*
		ListFieldsSummary - search service endpoint
		Returns a fields stats summary of the events to-date, for search ID (SID) search.
		Parameters:
			sid: The search ID.
			query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	ListFieldsSummary(sid string, query *ListFieldsSummaryQueryParams, resp ...*http.Response) (*FieldsSummary, error)
	/*
		ListJobs - search service endpoint
		Returns the matching list of search jobs.
		Parameters:
			query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	ListJobs(query *ListJobsQueryParams, resp ...*http.Response) ([]SearchJob, error)
	/*
		ListPreviewResults - search service endpoint
		Returns the preview search results for the job with the specified search ID (SID). Can be used when a job is running to return interim results.
		Parameters:
			sid: The search ID.
			query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	ListPreviewResults(sid string, query *ListPreviewResultsQueryParams, resp ...*http.Response) (*ListPreviewResultsResponse, error)
	/*
		ListResults - search service endpoint
		Returns the search results for the job with the specified search ID (SID).
		Parameters:
			sid: The search ID.
			query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	ListResults(sid string, query *ListResultsQueryParams, resp ...*http.Response) (*ListSearchResultsResponse, error)
	/*
		ListTimeBuckets - search service endpoint
		Returns the event distribution over time of the untransformed events read to-date, for search ID(SID) search.
		Parameters:
			sid: The search ID.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	ListTimeBuckets(sid string, resp ...*http.Response) (*TimeBucketsSummary, error)
	/*
		PutFederatedConnectionByName - search service endpoint
		Creates or updates a federated connection with a specified name (connectionName).
		Parameters:
			connectionName: The name of the federated connection.
			federatedConnectionInput
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	PutFederatedConnectionByName(connectionName string, federatedConnectionInput FederatedConnectionInput, resp ...*http.Response) (*FederatedConnection, error)
	/*
		RefreshFederatedConnection - search service endpoint
		Refresh a federated connection to fetch new remote indexes and add/delete corresponding federated datasets.
		Parameters:
			connectionName: The name of the federated connection.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	RefreshFederatedConnection(connectionName string, resp ...*http.Response) error
	/*
		TestFederatedConnection - search service endpoint
		Test connection with remote EC instance using federated connection parameters.
		Parameters:
			connectionName: The name of the federated connection.
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	TestFederatedConnection(connectionName string, resp ...*http.Response) error
	/*
		UpdateDatasetById - search service endpoint
		Modifies a dataset with a specified dataset ID (datasetid).
		Parameters:
			datasetid: The dataset ID.
			datasetPatch
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	UpdateDatasetById(datasetid string, datasetPatch DatasetPatch, resp ...*http.Response) (*Dataset, error)
	/*
		UpdateJob - search service endpoint
		Updates the search job with the specified search ID (SID) with an action.
		Parameters:
			sid: The search ID.
			updateJob
			resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
	*/
	UpdateJob(sid string, updateJob UpdateJob, resp ...*http.Response) (*SearchJob, error)
}
