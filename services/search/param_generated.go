/*
 * Copyright Â© 2022 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Splunk Search service
 *
 * Use the Search service in Splunk Cloud Services to dispatch, review, and manage searches and search jobs. You can finalize or cancel jobs, retrieve search results, and request search-related configurations from the Metadata Catalog service in Splunk Cloud Services.
 *
 * API version: v2 (recommended default)
 * Generated by: OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
 */

package search

// ExportResultsQueryParams represents valid query parameters for the ExportResults operation
// For convenience ExportResultsQueryParams can be formed in a single statement, for example:
//     `v := ExportResultsQueryParams{}.SetCount(...).SetFilename(...).SetOutputMode(...)`
type ExportResultsQueryParams struct {
	// Count : The maximum number of jobs that you want to return the status entries for.
	Count *int32 `key:"count"`
	// Filename : The export results filename. Default: exportResults
	Filename string `key:"filename"`
	// OutputMode : Specifies the format for the returned output.
	OutputMode ExportResultsoutputMode `key:"outputMode"`
}

func (q ExportResultsQueryParams) SetCount(v int32) ExportResultsQueryParams {
	q.Count = &v
	return q
}

func (q ExportResultsQueryParams) SetFilename(v string) ExportResultsQueryParams {
	q.Filename = v
	return q
}

func (q ExportResultsQueryParams) SetOutputMode(v ExportResultsoutputMode) ExportResultsQueryParams {
	q.OutputMode = v
	return q
}

// ExportResultsoutputMode : Specifies the format for the returned output.
type ExportResultsoutputMode string

// List of ExportResultsoutputMode values
const (
	ExportResultsoutputModeCsv  ExportResultsoutputMode = "csv"
	ExportResultsoutputModeJson ExportResultsoutputMode = "json"
)

// ListEventsSummaryQueryParams represents valid query parameters for the ListEventsSummary operation
// For convenience ListEventsSummaryQueryParams can be formed in a single statement, for example:
//     `v := ListEventsSummaryQueryParams{}.SetCount(...).SetEarliest(...).SetField(...).SetLatest(...).SetOffset(...)`
type ListEventsSummaryQueryParams struct {
	// Count : The maximum number of jobs that you want to return the status entries for.
	Count *int32 `key:"count"`
	// Earliest : The earliest time filter, in absolute time. When specifying an absolute time specify either UNIX time, or UTC in seconds using the ISO-8601 (%FT%T.%Q) format. For example 2021-01-25T13:15:30Z. GMT is the default timezone. You must specify GMT when you specify UTC. Any offset specified is ignored.
	Earliest string `key:"earliest"`
	// Field : One or more fields to return for the result set. Use a comma-separated list of field names to specify multiple fields.
	Field string `key:"field"`
	// Latest : The latest time filter in absolute time. When specifying an absolute time specify either UNIX time, or UTC in seconds using the ISO-8601 (%FT%T.%Q) format. For example 2021-01-25T13:15:30Z. GMT is the default timezone. You must specify GMT when you specify UTC. Any offset specified is ignored. Latest time must be after Earliest time.
	Latest string `key:"latest"`
	// Offset : Index number identifying the location of the first item to return.
	Offset *int32 `key:"offset"`
}

func (q ListEventsSummaryQueryParams) SetCount(v int32) ListEventsSummaryQueryParams {
	q.Count = &v
	return q
}

func (q ListEventsSummaryQueryParams) SetEarliest(v string) ListEventsSummaryQueryParams {
	q.Earliest = v
	return q
}

func (q ListEventsSummaryQueryParams) SetField(v string) ListEventsSummaryQueryParams {
	q.Field = v
	return q
}

func (q ListEventsSummaryQueryParams) SetLatest(v string) ListEventsSummaryQueryParams {
	q.Latest = v
	return q
}

func (q ListEventsSummaryQueryParams) SetOffset(v int32) ListEventsSummaryQueryParams {
	q.Offset = &v
	return q
}

// ListFieldsSummaryQueryParams represents valid query parameters for the ListFieldsSummary operation
// For convenience ListFieldsSummaryQueryParams can be formed in a single statement, for example:
//     `v := ListFieldsSummaryQueryParams{}.SetEarliest(...).SetLatest(...)`
type ListFieldsSummaryQueryParams struct {
	// Earliest : The earliest time filter, in absolute time. When specifying an absolute time specify either UNIX time, or UTC in seconds using the ISO-8601 (%FT%T.%Q) format. For example 2021-01-25T13:15:30Z. GMT is the default timezone. You must specify GMT when you specify UTC. Any offset specified is ignored.
	Earliest string `key:"earliest"`
	// Latest : The latest time filter in absolute time. When specifying an absolute time specify either UNIX time, or UTC in seconds using the ISO-8601 (%FT%T.%Q) format. For example 2021-01-25T13:15:30Z. GMT is the default timezone. You must specify GMT when you specify UTC. Any offset specified is ignored. Latest time must be after Earliest time.
	Latest string `key:"latest"`
}

func (q ListFieldsSummaryQueryParams) SetEarliest(v string) ListFieldsSummaryQueryParams {
	q.Earliest = v
	return q
}

func (q ListFieldsSummaryQueryParams) SetLatest(v string) ListFieldsSummaryQueryParams {
	q.Latest = v
	return q
}

// ListJobsQueryParams represents valid query parameters for the ListJobs operation
// For convenience ListJobsQueryParams can be formed in a single statement, for example:
//     `v := ListJobsQueryParams{}.SetCount(...).SetFilter(...).SetStatus(...)`
type ListJobsQueryParams struct {
	// Count : The maximum number of jobs that you want to return the status entries for.
	Count *int32 `key:"count"`
	// Filter : Filter the list of jobs by &#39;sid&#39;. Valid format is  &#x60;sid IN ({comma-separated list of SIDs. Each SID must be enclosed in double quotation marks.})&#x60;. A maximum of 30 SIDs can be specified in one query.
	Filter string `key:"filter"`
	// Status : Filter the list of jobs by status. Valid status values are &#39;running&#39;, &#39;done&#39;, &#39;canceled&#39;, or &#39;failed&#39;.
	Status SearchStatus `key:"status"`
}

func (q ListJobsQueryParams) SetCount(v int32) ListJobsQueryParams {
	q.Count = &v
	return q
}

func (q ListJobsQueryParams) SetFilter(v string) ListJobsQueryParams {
	q.Filter = v
	return q
}

func (q ListJobsQueryParams) SetStatus(v SearchStatus) ListJobsQueryParams {
	q.Status = v
	return q
}

// ListPreviewResultsQueryParams represents valid query parameters for the ListPreviewResults operation
// For convenience ListPreviewResultsQueryParams can be formed in a single statement, for example:
//     `v := ListPreviewResultsQueryParams{}.SetCount(...).SetOffset(...)`
type ListPreviewResultsQueryParams struct {
	// Count : The maximum number of jobs that you want to return the status entries for.
	Count *int32 `key:"count"`
	// Offset : Index number identifying the location of the first item to return.
	Offset *int32 `key:"offset"`
}

func (q ListPreviewResultsQueryParams) SetCount(v int32) ListPreviewResultsQueryParams {
	q.Count = &v
	return q
}

func (q ListPreviewResultsQueryParams) SetOffset(v int32) ListPreviewResultsQueryParams {
	q.Offset = &v
	return q
}

// ListResultsQueryParams represents valid query parameters for the ListResults operation
// For convenience ListResultsQueryParams can be formed in a single statement, for example:
//     `v := ListResultsQueryParams{}.SetCount(...).SetField(...).SetOffset(...)`
type ListResultsQueryParams struct {
	// Count : The maximum number of jobs that you want to return the status entries for.
	Count *int32 `key:"count"`
	// Field : One or more fields to return for the result set. Use a comma-separated list of field names to specify multiple fields.
	Field string `key:"field"`
	// Offset : Index number identifying the location of the first item to return.
	Offset *int32 `key:"offset"`
}

func (q ListResultsQueryParams) SetCount(v int32) ListResultsQueryParams {
	q.Count = &v
	return q
}

func (q ListResultsQueryParams) SetField(v string) ListResultsQueryParams {
	q.Field = v
	return q
}

func (q ListResultsQueryParams) SetOffset(v int32) ListResultsQueryParams {
	q.Offset = &v
	return q
}
