/*
 * Copyright Â© 2022 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * KV Store API
 *
 * With the Splunk Cloud KV store service in Splunk Cloud Services, you can save and retrieve data within your Splunk Cloud apps, enabling you to manage and maintain state in your application.
 *
 * API version: v1beta1.2 (recommended default)
 * Generated by: OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
 */

package kvstore

// DeleteRecordsQueryParams represents valid query parameters for the DeleteRecords operation
// For convenience DeleteRecordsQueryParams can be formed in a single statement, for example:
//     `v := DeleteRecordsQueryParams{}.SetEnableMvl(...).SetQuery(...)`
type DeleteRecordsQueryParams struct {
	// EnableMvl : Determines if the query needs to include results in multi valued fields
	EnableMvl *bool `key:"enable_mvl"`
	// Query : Query JSON expression.
	Query string `key:"query"`
}

func (q DeleteRecordsQueryParams) SetEnableMvl(v bool) DeleteRecordsQueryParams {
	q.EnableMvl = &v
	return q
}

func (q DeleteRecordsQueryParams) SetQuery(v string) DeleteRecordsQueryParams {
	q.Query = v
	return q
}

// InsertRecordsQueryParams represents valid query parameters for the InsertRecords operation
// For convenience InsertRecordsQueryParams can be formed in a single statement, for example:
//     `v := InsertRecordsQueryParams{}.SetAllowUpdates(...)`
type InsertRecordsQueryParams struct {
	// AllowUpdates : If allow_updates is false (default), the writes will be performed as a single INSERT. If any record already exists, the entire INSERT will fail and no records will be inserted. If allow_updates is true, the writes will be performed as a single INSERT ON CONFLICT. If one or more records already exists, said records will be updated and their _version&#39;s will be incremented. New records will be inserted with a _version of 0.
	AllowUpdates *bool `key:"allow_updates"`
}

func (q InsertRecordsQueryParams) SetAllowUpdates(v bool) InsertRecordsQueryParams {
	q.AllowUpdates = &v
	return q
}

// ListRecordsQueryParams represents valid query parameters for the ListRecords operation
// For convenience ListRecordsQueryParams can be formed in a single statement, for example:
//     `v := ListRecordsQueryParams{}.SetCount(...).SetFields(...).SetFilters(...).SetOffset(...).SetOrderby(...)`
type ListRecordsQueryParams struct {
	// Count : Maximum number of records to return.
	Count *int32 `key:"count"`
	// Fields : Comma-separated list of fields to include or exclude. Format is &#x60;&lt;field&gt;:&lt;include value&gt;&#x60;. Valid include values are 1 for include, 0 for exclude with default being 1.
	Fields  []string               `key:"fields"`
	Filters map[string]interface{} `key:"filters"`
	// Offset : Number of records to skip from the start.
	Offset *int32 `key:"offset"`
	// Orderby : Sort order. Format is &#x60;&lt;field&gt;:&lt;sort order&gt;&#x60;. Valid sort orders are 1 for ascending, -1 for descending.
	Orderby []string `key:"orderby"`
}

func (q ListRecordsQueryParams) SetCount(v int32) ListRecordsQueryParams {
	q.Count = &v
	return q
}

func (q ListRecordsQueryParams) SetFields(v []string) ListRecordsQueryParams {
	q.Fields = v
	return q
}

func (q ListRecordsQueryParams) SetFilters(v map[string]interface{}) ListRecordsQueryParams {
	q.Filters = v
	return q
}

func (q ListRecordsQueryParams) SetOffset(v int32) ListRecordsQueryParams {
	q.Offset = &v
	return q
}

func (q ListRecordsQueryParams) SetOrderby(v []string) ListRecordsQueryParams {
	q.Orderby = v
	return q
}

// QueryRecordsQueryParams represents valid query parameters for the QueryRecords operation
// For convenience QueryRecordsQueryParams can be formed in a single statement, for example:
//     `v := QueryRecordsQueryParams{}.SetCount(...).SetEnableMvl(...).SetFields(...).SetOffset(...).SetOrderby(...).SetQuery(...).SetShared(...)`
type QueryRecordsQueryParams struct {
	// Count : Maximum number of records to return.
	Count *int32 `key:"count"`
	// EnableMvl : Determines if the query needs to include results in multi valued fields
	EnableMvl *bool `key:"enable_mvl"`
	// Fields : Comma-separated list of fields to include or exclude. Format is &#x60;&lt;field&gt;:&lt;include value&gt;&#x60;. Valid include values are 1 for include, 0 for exclude with default being 1.
	Fields []string `key:"fields"`
	// Offset : Number of records to skip from the start.
	Offset *int32 `key:"offset"`
	// Orderby : Sort order. Format is &#x60;&lt;field&gt;:&lt;sort order&gt;&#x60;. Valid sort orders are 1 for ascending, -1 for descending.
	Orderby []string `key:"orderby"`
	// Query : Query JSON expression.
	Query string `key:"query"`
	// Shared : Indicates whether to return records only for the user specified in the Splunk-User-Id header or for the default user as well. Only valid if Splunk-User-Id is specified
	Shared *bool `key:"shared"`
}

func (q QueryRecordsQueryParams) SetCount(v int32) QueryRecordsQueryParams {
	q.Count = &v
	return q
}

func (q QueryRecordsQueryParams) SetEnableMvl(v bool) QueryRecordsQueryParams {
	q.EnableMvl = &v
	return q
}

func (q QueryRecordsQueryParams) SetFields(v []string) QueryRecordsQueryParams {
	q.Fields = v
	return q
}

func (q QueryRecordsQueryParams) SetOffset(v int32) QueryRecordsQueryParams {
	q.Offset = &v
	return q
}

func (q QueryRecordsQueryParams) SetOrderby(v []string) QueryRecordsQueryParams {
	q.Orderby = v
	return q
}

func (q QueryRecordsQueryParams) SetQuery(v string) QueryRecordsQueryParams {
	q.Query = v
	return q
}

func (q QueryRecordsQueryParams) SetShared(v bool) QueryRecordsQueryParams {
	q.Shared = &v
	return q
}
