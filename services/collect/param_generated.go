/*
 * Copyright Â© 2021 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Collect Service
 *
 * With the Collect service in Splunk Cloud Services, you can manage how data collection jobs ingest event and metric data.
 *
 * API version: v1beta1.8 (recommended default)
 * Generated by: OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
 */

package collect

// ListJobsQueryParams represents valid query parameters for the ListJobs operation
// For convenience ListJobsQueryParams can be formed in a single statement, for example:
//     `v := ListJobsQueryParams{}.SetConnectorId(...)`
type ListJobsQueryParams struct {
	// ConnectorId : Specifies the connector ID used to filter jobs. A tailing wildcard is supported for the connector ID tag. If no wildcard is used then an exact match is used. Examples: * &#x60;my-connector:v1.0.0&#x60; selects &#x60;my-connector&#x60; connector with an exact match with tag \&quot;v1.0.0\&quot; * &#x60;my-connector&#x60; selects &#x60;my-connector&#x60; connector with an exact match. Note as no tag is specified it actually refers to \&quot;latest\&quot;. * &#x60;my-connector:v1.*&#x60; selects all &#x60;my-connector&#x60; connectors with tags starting with \&quot;v1.\&quot;, e.g. \&quot;v1.0\&quot;, \&quot;v1.1.1\&quot;, \&quot;v1.2-alpha\&quot;, etc. * &#x60;my-connector:*&#x60; selects all &#x60;my-connector&#x60; connectors with any tag.
	ConnectorId string `key:"connectorID"`
}

func (q ListJobsQueryParams) SetConnectorId(v string) ListJobsQueryParams {
	q.ConnectorId = v
	return q
}

// PatchJobsQueryParams represents valid query parameters for the PatchJobs operation
// For convenience PatchJobsQueryParams can be formed in a single statement, for example:
//     `v := PatchJobsQueryParams{}.SetConnectorId(...).SetJobIDs(...)`
type PatchJobsQueryParams struct {
	// ConnectorId : Specifies the connector ID used to filter jobs. A tailing wildcard is supported for the connector ID tag. If no wildcard is used then an exact match is used. Examples: * &#x60;my-connector:v1.0.0&#x60; selects &#x60;my-connector&#x60; connector with an exact match with tag \&quot;v1.0.0\&quot; * &#x60;my-connector&#x60; selects &#x60;my-connector&#x60; connector with an exact match. Note as no tag is specified it actually refers to \&quot;latest\&quot;. * &#x60;my-connector:v1.*&#x60; selects all &#x60;my-connector&#x60; connectors with tags starting with \&quot;v1.\&quot;, e.g. \&quot;v1.0\&quot;, \&quot;v1.1.1\&quot;, \&quot;v1.2-alpha\&quot;, etc. * &#x60;my-connector:*&#x60; selects all &#x60;my-connector&#x60; connectors with any tag.
	ConnectorId string `key:"connectorID"`
	// JobIDs : The job ID list.
	JobIDs []string `key:"jobIDs" explode:"false"`
}

func (q PatchJobsQueryParams) SetConnectorId(v string) PatchJobsQueryParams {
	q.ConnectorId = v
	return q
}

func (q PatchJobsQueryParams) SetJobIDs(v []string) PatchJobsQueryParams {
	q.JobIDs = v
	return q
}
