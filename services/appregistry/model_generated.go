/*
 * Copyright Â© 2022 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * App Registry
 *
 * With the App Registry service in Splunk Cloud Services, you can create, update, and manage your apps.
 *
 * API version: v1beta2.0 (recommended default)
 * Generated by: OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
 */

package appregistry

import (
	"encoding/json"
)

type AppMetadataInternal struct {
	// OAuth 2.0 Client ID.
	ClientId *string `json:"clientId,omitempty"`
	// The date that the app was created.
	CreatedAt *string `json:"createdAt,omitempty"`
	// The principal who created this app.
	CreatedBy *string `json:"createdBy,omitempty"`
}

type AppMetadataPrivate struct {
	// Array of URLs that can be used for redirect after logging into the app.
	RedirectUrls []string `json:"redirectUrls,omitempty"`
	// URL to redirect to after a subscription is created.
	SetupUrl *string `json:"setupUrl,omitempty"`
	// URL that webhook events are sent to.
	WebhookUrl *string `json:"webhookUrl,omitempty"`
}

type AppMetadataPublic struct {
	// Array of permission templates that are used to grant permission to the app principal when a tenant subscribes.
	AppPrincipalPermissions []string `json:"appPrincipalPermissions,omitempty"`
	// Short paragraph describing the app.
	Description *string `json:"description,omitempty"`
	// The URL used to log in to the app.
	LoginUrl *string `json:"loginUrl,omitempty"`
	// The URL used to display the app's logo.
	LogoUrl *string `json:"logoUrl,omitempty"`
	// Human-readable title for the app.
	Title *string `json:"title,omitempty"`
	// Array of permission filter templates that are used to intersect with a user's permissions when using the app.
	UserPermissionsFilter []string `json:"userPermissionsFilter,omitempty"`
}

type AppMetadataSecret struct {
	// OAuth 2.0 Client Secret string (used for confidential clients).
	ClientSecret *string `json:"clientSecret,omitempty"`
}

type AppName struct {
	AppName string `json:"appName"`
}

type AppResource struct {
	Kind AppResourceKind `json:"kind"`
	// App name that is unique within Splunk Cloud Platform.
	Name string `json:"name"`
}

// AppResourceKind :
type AppResourceKind string

// List of AppResourceKind
const (
	AppResourceKindWeb     AppResourceKind = "web"
	AppResourceKindNative  AppResourceKind = "native"
	AppResourceKindService AppResourceKind = "service"
)

type AppResponseCreateUpdate struct {
	nativeApp  *NativeApp
	serviceApp *ServiceApp
	webApp     *WebApp
	raw        interface{}
}

// MakeAppResponseCreateUpdateFromNativeApp creates a new AppResponseCreateUpdate from an instance of NativeApp
func MakeAppResponseCreateUpdateFromNativeApp(f NativeApp) AppResponseCreateUpdate {
	return AppResponseCreateUpdate{nativeApp: &f}
}

// IsNativeApp checks if the AppResponseCreateUpdate is a NativeApp
func (m AppResponseCreateUpdate) IsNativeApp() bool {
	return m.nativeApp != nil
}

// NativeApp returns NativeApp if IsNativeApp() is true, nil otherwise
func (m AppResponseCreateUpdate) NativeApp() *NativeApp {
	return m.nativeApp
}

// MakeAppResponseCreateUpdateFromServiceApp creates a new AppResponseCreateUpdate from an instance of ServiceApp
func MakeAppResponseCreateUpdateFromServiceApp(f ServiceApp) AppResponseCreateUpdate {
	return AppResponseCreateUpdate{serviceApp: &f}
}

// IsServiceApp checks if the AppResponseCreateUpdate is a ServiceApp
func (m AppResponseCreateUpdate) IsServiceApp() bool {
	return m.serviceApp != nil
}

// ServiceApp returns ServiceApp if IsServiceApp() is true, nil otherwise
func (m AppResponseCreateUpdate) ServiceApp() *ServiceApp {
	return m.serviceApp
}

// MakeAppResponseCreateUpdateFromWebApp creates a new AppResponseCreateUpdate from an instance of WebApp
func MakeAppResponseCreateUpdateFromWebApp(f WebApp) AppResponseCreateUpdate {
	return AppResponseCreateUpdate{webApp: &f}
}

// IsWebApp checks if the AppResponseCreateUpdate is a WebApp
func (m AppResponseCreateUpdate) IsWebApp() bool {
	return m.webApp != nil
}

// WebApp returns WebApp if IsWebApp() is true, nil otherwise
func (m AppResponseCreateUpdate) WebApp() *WebApp {
	return m.webApp
}

// MakeAppResponseCreateUpdateFromRawInterface creates a new AppResponseCreateUpdate from a raw interface{}
func MakeAppResponseCreateUpdateFromRawInterface(f interface{}) AppResponseCreateUpdate {
	return AppResponseCreateUpdate{raw: f}
}

// IsRawInterface checks if the AppResponseCreateUpdate is an interface{} (unknown type)
func (m AppResponseCreateUpdate) IsRawInterface() bool {
	return m.raw != nil
}

// RawInterface returns interface{} if IsRawInterface() is true (unknown type), nil otherwise
func (m AppResponseCreateUpdate) RawInterface() interface{} {
	return m.raw
}

// UnmarshalJSON unmarshals AppResponseCreateUpdate using the "kind" property
func (m *AppResponseCreateUpdate) UnmarshalJSON(b []byte) (err error) {
	type discriminator struct {
		Kind string `json:"kind"`
	}
	var d discriminator
	err = json.Unmarshal(b, &d)
	if err != nil {
		return err
	}
	// Resolve into respective struct based on the discriminator value
	switch d.Kind {
	case "native":
		m.nativeApp = &NativeApp{}
		return json.Unmarshal(b, m.nativeApp)
	case "service":
		m.serviceApp = &ServiceApp{}
		return json.Unmarshal(b, m.serviceApp)
	case "web":
		m.webApp = &WebApp{}
		return json.Unmarshal(b, m.webApp)
	}
	// Unknown discriminator value (this type may not yet be supported)
	// unmarhsal to raw interface
	var raw interface{}
	err = json.Unmarshal(b, &raw)
	if err != nil {
		return err
	}
	m.raw = raw
	return nil
}

// MarshalJSON marshals AppResponseCreateUpdate using the appropriate struct field
func (m AppResponseCreateUpdate) MarshalJSON() ([]byte, error) {
	if m.IsNativeApp() {
		return json.Marshal(m.nativeApp)
	} else if m.IsServiceApp() {
		return json.Marshal(m.serviceApp)
	} else if m.IsWebApp() {
		return json.Marshal(m.webApp)
	}
	// None of the structs are populated, send raw
	return json.Marshal(m.raw)
}

type AppResponseGetList struct {
	nativeApp  *NativeApp
	serviceApp *ServiceApp
	webApp     *WebApp
	raw        interface{}
}

// MakeAppResponseGetListFromNativeApp creates a new AppResponseGetList from an instance of NativeApp
func MakeAppResponseGetListFromNativeApp(f NativeApp) AppResponseGetList {
	return AppResponseGetList{nativeApp: &f}
}

// IsNativeApp checks if the AppResponseGetList is a NativeApp
func (m AppResponseGetList) IsNativeApp() bool {
	return m.nativeApp != nil
}

// NativeApp returns NativeApp if IsNativeApp() is true, nil otherwise
func (m AppResponseGetList) NativeApp() *NativeApp {
	return m.nativeApp
}

// MakeAppResponseGetListFromServiceApp creates a new AppResponseGetList from an instance of ServiceApp
func MakeAppResponseGetListFromServiceApp(f ServiceApp) AppResponseGetList {
	return AppResponseGetList{serviceApp: &f}
}

// IsServiceApp checks if the AppResponseGetList is a ServiceApp
func (m AppResponseGetList) IsServiceApp() bool {
	return m.serviceApp != nil
}

// ServiceApp returns ServiceApp if IsServiceApp() is true, nil otherwise
func (m AppResponseGetList) ServiceApp() *ServiceApp {
	return m.serviceApp
}

// MakeAppResponseGetListFromWebApp creates a new AppResponseGetList from an instance of WebApp
func MakeAppResponseGetListFromWebApp(f WebApp) AppResponseGetList {
	return AppResponseGetList{webApp: &f}
}

// IsWebApp checks if the AppResponseGetList is a WebApp
func (m AppResponseGetList) IsWebApp() bool {
	return m.webApp != nil
}

// WebApp returns WebApp if IsWebApp() is true, nil otherwise
func (m AppResponseGetList) WebApp() *WebApp {
	return m.webApp
}

// MakeAppResponseGetListFromRawInterface creates a new AppResponseGetList from a raw interface{}
func MakeAppResponseGetListFromRawInterface(f interface{}) AppResponseGetList {
	return AppResponseGetList{raw: f}
}

// IsRawInterface checks if the AppResponseGetList is an interface{} (unknown type)
func (m AppResponseGetList) IsRawInterface() bool {
	return m.raw != nil
}

// RawInterface returns interface{} if IsRawInterface() is true (unknown type), nil otherwise
func (m AppResponseGetList) RawInterface() interface{} {
	return m.raw
}

// UnmarshalJSON unmarshals AppResponseGetList using the "kind" property
func (m *AppResponseGetList) UnmarshalJSON(b []byte) (err error) {
	type discriminator struct {
		Kind string `json:"kind"`
	}
	var d discriminator
	err = json.Unmarshal(b, &d)
	if err != nil {
		return err
	}
	// Resolve into respective struct based on the discriminator value
	switch d.Kind {
	case "native":
		m.nativeApp = &NativeApp{}
		return json.Unmarshal(b, m.nativeApp)
	case "service":
		m.serviceApp = &ServiceApp{}
		return json.Unmarshal(b, m.serviceApp)
	case "web":
		m.webApp = &WebApp{}
		return json.Unmarshal(b, m.webApp)
	}
	// Unknown discriminator value (this type may not yet be supported)
	// unmarhsal to raw interface
	var raw interface{}
	err = json.Unmarshal(b, &raw)
	if err != nil {
		return err
	}
	m.raw = raw
	return nil
}

// MarshalJSON marshals AppResponseGetList using the appropriate struct field
func (m AppResponseGetList) MarshalJSON() ([]byte, error) {
	if m.IsNativeApp() {
		return json.Marshal(m.nativeApp)
	} else if m.IsServiceApp() {
		return json.Marshal(m.serviceApp)
	} else if m.IsWebApp() {
		return json.Marshal(m.webApp)
	}
	// None of the structs are populated, send raw
	return json.Marshal(m.raw)
}

type CreateAppRequest struct {
	nativeAppPost  *NativeAppPost
	serviceAppPost *ServiceAppPost
	raw            interface{}
}

// MakeCreateAppRequestFromNativeAppPost creates a new CreateAppRequest from an instance of NativeAppPost
func MakeCreateAppRequestFromNativeAppPost(f NativeAppPost) CreateAppRequest {
	return CreateAppRequest{nativeAppPost: &f}
}

// IsNativeAppPost checks if the CreateAppRequest is a NativeAppPost
func (m CreateAppRequest) IsNativeAppPost() bool {
	return m.nativeAppPost != nil
}

// NativeAppPost returns NativeAppPost if IsNativeAppPost() is true, nil otherwise
func (m CreateAppRequest) NativeAppPost() *NativeAppPost {
	return m.nativeAppPost
}

// MakeCreateAppRequestFromServiceAppPost creates a new CreateAppRequest from an instance of ServiceAppPost
func MakeCreateAppRequestFromServiceAppPost(f ServiceAppPost) CreateAppRequest {
	return CreateAppRequest{serviceAppPost: &f}
}

// IsServiceAppPost checks if the CreateAppRequest is a ServiceAppPost
func (m CreateAppRequest) IsServiceAppPost() bool {
	return m.serviceAppPost != nil
}

// ServiceAppPost returns ServiceAppPost if IsServiceAppPost() is true, nil otherwise
func (m CreateAppRequest) ServiceAppPost() *ServiceAppPost {
	return m.serviceAppPost
}

// MakeCreateAppRequestFromRawInterface creates a new CreateAppRequest from a raw interface{}
func MakeCreateAppRequestFromRawInterface(f interface{}) CreateAppRequest {
	return CreateAppRequest{raw: f}
}

// IsRawInterface checks if the CreateAppRequest is an interface{} (unknown type)
func (m CreateAppRequest) IsRawInterface() bool {
	return m.raw != nil
}

// RawInterface returns interface{} if IsRawInterface() is true (unknown type), nil otherwise
func (m CreateAppRequest) RawInterface() interface{} {
	return m.raw
}

// UnmarshalJSON unmarshals CreateAppRequest using the "kind" property
func (m *CreateAppRequest) UnmarshalJSON(b []byte) (err error) {
	type discriminator struct {
		Kind string `json:"kind"`
	}
	var d discriminator
	err = json.Unmarshal(b, &d)
	if err != nil {
		return err
	}
	// Resolve into respective struct based on the discriminator value
	switch d.Kind {
	case "native":
		m.nativeAppPost = &NativeAppPost{}
		return json.Unmarshal(b, m.nativeAppPost)
	case "service":
		m.serviceAppPost = &ServiceAppPost{}
		return json.Unmarshal(b, m.serviceAppPost)
	}
	// Unknown discriminator value (this type may not yet be supported)
	// unmarhsal to raw interface
	var raw interface{}
	err = json.Unmarshal(b, &raw)
	if err != nil {
		return err
	}
	m.raw = raw
	return nil
}

// MarshalJSON marshals CreateAppRequest using the appropriate struct field
func (m CreateAppRequest) MarshalJSON() ([]byte, error) {
	if m.IsNativeAppPost() {
		return json.Marshal(m.nativeAppPost)
	} else if m.IsServiceAppPost() {
		return json.Marshal(m.serviceAppPost)
	}
	// None of the structs are populated, send raw
	return json.Marshal(m.raw)
}

type Error struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// Public Key
type Key struct {
	// Public key used for verifying signed webhook requests.
	Key *string `json:"key,omitempty"`
}

// A native kind app.
type NativeApp struct {
	// OAuth 2.0 Client ID.
	ClientId string `json:"clientId"`
	// The date that the app was created.
	CreatedAt string `json:"createdAt"`
	// The principal who created this app.
	CreatedBy string          `json:"createdBy"`
	Kind      AppResourceKind `json:"kind"`
	// App name that is unique within Splunk Cloud Platform.
	Name string `json:"name"`
	// Human-readable title for the app.
	Title string `json:"title"`
	// Array of permission templates that are used to grant permission to the app principal when a tenant subscribes.
	AppPrincipalPermissions []string `json:"appPrincipalPermissions,omitempty"`
	// Short paragraph describing the app.
	Description *string `json:"description,omitempty"`
	// The URL used to log in to the app.
	LoginUrl *string `json:"loginUrl,omitempty"`
	// The URL used to display the app's logo.
	LogoUrl *string `json:"logoUrl,omitempty"`
	// Array of URLs that can be used for redirect after logging into the app.
	RedirectUrls []string `json:"redirectUrls,omitempty"`
	// URL to redirect to after a subscription is created.
	SetupUrl *string `json:"setupUrl,omitempty"`
	// Array of permission filter templates that are used to intersect with a user's permissions when using the app.
	UserPermissionsFilter []string `json:"userPermissionsFilter,omitempty"`
	// URL that webhook events are sent to.
	WebhookUrl *string `json:"webhookUrl,omitempty"`
}

// Required input for creating a native kind app.
type NativeAppPost struct {
	Kind AppResourceKind `json:"kind"`
	// App name that is unique within Splunk Cloud Platform.
	Name string `json:"name"`
	// Human-readable title for the app.
	Title string `json:"title"`
	// Array of permission templates that are used to grant permission to the app principal when a tenant subscribes.
	AppPrincipalPermissions []string `json:"appPrincipalPermissions,omitempty"`
	// Short paragraph describing the app.
	Description *string `json:"description,omitempty"`
	// The URL used to log in to the app.
	LoginUrl *string `json:"loginUrl,omitempty"`
	// The URL used to display the app's logo.
	LogoUrl *string `json:"logoUrl,omitempty"`
	// Array of URLs that can be used for redirect after logging into the app.
	RedirectUrls []string `json:"redirectUrls,omitempty"`
	// URL to redirect to after a subscription is created.
	SetupUrl *string `json:"setupUrl,omitempty"`
	// Array of permission filter templates that are used to intersect with a user's permissions when using the app.
	UserPermissionsFilter []string `json:"userPermissionsFilter,omitempty"`
	// URL that webhook events are sent to.
	WebhookUrl *string `json:"webhookUrl,omitempty"`
}

// A service kind app.
type ServiceApp struct {
	// OAuth 2.0 Client ID.
	ClientId string `json:"clientId"`
	// OAuth 2.0 Client Secret string (used for confidential clients).
	ClientSecret string `json:"clientSecret"`
	// The date that the app was created.
	CreatedAt string `json:"createdAt"`
	// The principal who created this app.
	CreatedBy string          `json:"createdBy"`
	Kind      AppResourceKind `json:"kind"`
	// App name that is unique within Splunk Cloud Platform.
	Name string `json:"name"`
	// Human-readable title for the app.
	Title string `json:"title"`
	// Array of permission templates that are used to grant permission to the app principal when a tenant subscribes.
	AppPrincipalPermissions []string `json:"appPrincipalPermissions,omitempty"`
	// Short paragraph describing the app.
	Description *string `json:"description,omitempty"`
	// The URL used to log in to the app.
	LoginUrl *string `json:"loginUrl,omitempty"`
	// The URL used to display the app's logo.
	LogoUrl *string `json:"logoUrl,omitempty"`
	// Array of URLs that can be used for redirect after logging into the app.
	RedirectUrls []string `json:"redirectUrls,omitempty"`
	// URL to redirect to after a subscription is created.
	SetupUrl *string `json:"setupUrl,omitempty"`
	// Array of permission filter templates that are used to intersect with a user's permissions when using the app.
	UserPermissionsFilter []string `json:"userPermissionsFilter,omitempty"`
	// URL that webhook events are sent to.
	WebhookUrl *string `json:"webhookUrl,omitempty"`
}

// Required input for creating a service kind app.
type ServiceAppPost struct {
	Kind AppResourceKind `json:"kind"`
	// App name that is unique within Splunk Cloud Platform.
	Name string `json:"name"`
	// Human-readable title for the app.
	Title string `json:"title"`
	// Array of permission templates that are used to grant permission to the app principal when a tenant subscribes.
	AppPrincipalPermissions []string `json:"appPrincipalPermissions,omitempty"`
	// Short paragraph describing the app.
	Description *string `json:"description,omitempty"`
	// The URL used to log in to the app.
	LoginUrl *string `json:"loginUrl,omitempty"`
	// The URL used to display the app's logo.
	LogoUrl *string `json:"logoUrl,omitempty"`
	// Array of URLs that can be used for redirect after logging into the app.
	RedirectUrls []string `json:"redirectUrls,omitempty"`
	// URL to redirect to after a subscription is created.
	SetupUrl *string `json:"setupUrl,omitempty"`
	// Array of permission filter templates that are used to intersect with a user's permissions when using the app.
	UserPermissionsFilter []string `json:"userPermissionsFilter,omitempty"`
	// URL that webhook events are sent to.
	WebhookUrl *string `json:"webhookUrl,omitempty"`
}

type Subscription struct {
	// App name.
	AppName string `json:"appName"`
	// Time of subscription creation (UTC).
	CreatedAt string `json:"createdAt"`
	// The user who created the subscription.
	CreatedBy string `json:"createdBy"`
	// Short paragraph describing the app.
	Description string `json:"description"`
	// URL used to login to the app.
	LoginUrl string `json:"loginUrl"`
	// The URL used to display the app's logo.
	LogoUrl string `json:"logoUrl"`
	// Human-readable name for the application.
	Title string `json:"title"`
	// The tenant that is subscribed to the app.
	Tenant *string `json:"tenant,omitempty"`
}

type UpdateAppRequest struct {
	// Array of permission templates that are used to grant permission to the app principal when a tenant subscribes.
	AppPrincipalPermissions []string `json:"appPrincipalPermissions,omitempty"`
	// Short paragraph describing the app.
	Description *string `json:"description,omitempty"`
	// The URL used to log in to the app.
	LoginUrl *string `json:"loginUrl,omitempty"`
	// The URL used to display the app's logo.
	LogoUrl *string `json:"logoUrl,omitempty"`
	// Array of URLs that can be used for redirect after logging into the app.
	RedirectUrls []string `json:"redirectUrls,omitempty"`
	// URL to redirect to after a subscription is created.
	SetupUrl *string `json:"setupUrl,omitempty"`
	// Human-readable title for the app.
	Title *string `json:"title,omitempty"`
	// Array of permission filter templates that are used to intersect with a user's permissions when using the app.
	UserPermissionsFilter []string `json:"userPermissionsFilter,omitempty"`
	// URL that webhook events are sent to.
	WebhookUrl *string `json:"webhookUrl,omitempty"`
}

// A web kind app.
type WebApp struct {
	// OAuth 2.0 Client ID.
	ClientId string `json:"clientId"`
	// OAuth 2.0 Client Secret string (used for confidential clients).
	ClientSecret string `json:"clientSecret"`
	// The date that the app was created.
	CreatedAt string `json:"createdAt"`
	// The principal who created this app.
	CreatedBy string          `json:"createdBy"`
	Kind      AppResourceKind `json:"kind"`
	// App name that is unique within Splunk Cloud Platform.
	Name string `json:"name"`
	// Array of URLs that can be used for redirect after logging into the app.
	RedirectUrls []string `json:"redirectUrls"`
	// Human-readable title for the app.
	Title string `json:"title"`
	// Array of permission templates that are used to grant permission to the app principal when a tenant subscribes.
	AppPrincipalPermissions []string `json:"appPrincipalPermissions,omitempty"`
	// Short paragraph describing the app.
	Description *string `json:"description,omitempty"`
	// The URL used to log in to the app.
	LoginUrl *string `json:"loginUrl,omitempty"`
	// The URL used to display the app's logo.
	LogoUrl *string `json:"logoUrl,omitempty"`
	// URL to redirect to after a subscription is created.
	SetupUrl *string `json:"setupUrl,omitempty"`
	// Array of permission filter templates that are used to intersect with a user's permissions when using the app.
	UserPermissionsFilter []string `json:"userPermissionsFilter,omitempty"`
	// URL that webhook events are sent to.
	WebhookUrl *string `json:"webhookUrl,omitempty"`
}
