/*
 * Copyright Â© 2022 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Identity
 *
 * With the Identity service in Splunk Cloud Services, you can authenticate and authorize Splunk Cloud Services users.
 *
 * API version: v3.6 (recommended default)
 * Generated by: OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
 */

package identity

import (
	"net/http"

	"github.com/khulnasoft-lab/go-dependencies/services"
	"github.com/khulnasoft-lab/go-dependencies/util"
)

const serviceCluster = "api"

type Service services.BaseService

// NewService creates a new identity service client from the given Config
func NewService(iClient services.IClient) *Service {
	return &Service{Client: iClient}
}

/*
AddGroupMember - identity service endpoint
Adds a member to a given group.
Parameters:

	group: The group name.
	addGroupMemberBody: The member to add to a group.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) AddGroupMember(group string, addGroupMemberBody AddGroupMemberBody, resp ...*http.Response) (*GroupMember, error) {
	pp := struct {
		Group string
	}{
		Group: group,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/groups/{{.Group}}/members`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Post(services.RequestParams{URL: u, Body: addGroupMemberBody})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb GroupMember
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
AddGroupRole - identity service endpoint
Adds a role to a given group.
Parameters:

	group: The group name.
	addGroupRoleBody: The role to add to a group.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) AddGroupRole(group string, addGroupRoleBody AddGroupRoleBody, resp ...*http.Response) (*GroupRole, error) {
	pp := struct {
		Group string
	}{
		Group: group,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/groups/{{.Group}}/roles`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Post(services.RequestParams{URL: u, Body: addGroupRoleBody})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb GroupRole
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
AddMember - identity service endpoint
Adds a member to a given tenant.
Parameters:

	addMemberBody: The member to associate with a tenant.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) AddMember(addMemberBody AddMemberBody, resp ...*http.Response) (*Member, error) {
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/members`, nil)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Post(services.RequestParams{URL: u, Body: addMemberBody})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb Member
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
AddPrincipalPublicKey - identity service endpoint
Add service principal public key
Parameters:

	principal: The principal name.
	ecJwk: Service principal public key
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) AddPrincipalPublicKey(principal string, ecJwk EcJwk, resp ...*http.Response) (*PrincipalPublicKey, error) {
	pp := struct {
		Principal string
	}{
		Principal: principal,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/system/identity/v3/principals/{{.Principal}}/keys`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Post(services.RequestParams{URL: u, Body: ecJwk})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb PrincipalPublicKey
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
AddRolePermission - identity service endpoint
Adds permissions to a role in a given tenant.
Parameters:

	role: The role name.
	addRolePermissionBody: The permission to add to a role.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) AddRolePermission(role string, addRolePermissionBody AddRolePermissionBody, resp ...*http.Response) (*RolePermission, error) {
	pp := struct {
		Role string
	}{
		Role: role,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/roles/{{.Role}}/permissions`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Post(services.RequestParams{URL: u, Body: addRolePermissionBody})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb RolePermission
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
CreateGroup - identity service endpoint
Creates a new group in a given tenant.
Parameters:

	createGroupBody: The group definition.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) CreateGroup(createGroupBody CreateGroupBody, resp ...*http.Response) (*Group, error) {
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/groups`, nil)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Post(services.RequestParams{URL: u, Body: createGroupBody})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb Group
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
CreateIdentityProvider - identity service endpoint
Create an Identity Provider.
Parameters:

	identityProviderConfigBody: The Identity Provider to create.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) CreateIdentityProvider(identityProviderConfigBody IdentityProviderConfigBody, resp ...*http.Response) (*IdentityProviderBody, error) {
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/identityproviders`, nil)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Post(services.RequestParams{URL: u, Body: identityProviderConfigBody})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb IdentityProviderBody
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
CreatePrincipal - identity service endpoint
Create a new principal
Parameters:

	createPrincipalBody: The new principal to add to the system.
	query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) CreatePrincipal(createPrincipalBody CreatePrincipalBody, query *CreatePrincipalQueryParams, resp ...*http.Response) (*Principal, error) {
	values := util.ParseURLParams(query)
	u, err := s.Client.BuildURLFromPathParams(values, serviceCluster, `/system/identity/v3/principals`, nil)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Post(services.RequestParams{URL: u, Body: createPrincipalBody})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb Principal
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
CreateRole - identity service endpoint
Creates a new authorization role in a given tenant.
Parameters:

	createRoleBody: Role definition
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) CreateRole(createRoleBody CreateRoleBody, resp ...*http.Response) (*Role, error) {
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/roles`, nil)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Post(services.RequestParams{URL: u, Body: createRoleBody})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb Role
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
CreateSamlClient - identity service endpoint
Create a SAML client.
Parameters:

	createSamlClientBody
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) CreateSamlClient(createSamlClientBody CreateSamlClientBody, resp ...*http.Response) (*SamlClient, error) {
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/clients/saml`, nil)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Post(services.RequestParams{URL: u, Body: createSamlClientBody})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb SamlClient
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
DeleteGroup - identity service endpoint
Deletes a group in a given tenant.
Parameters:

	group: The group name.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) DeleteGroup(group string, resp ...*http.Response) error {
	pp := struct {
		Group string
	}{
		Group: group,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/groups/{{.Group}}`, pp)
	if err != nil {
		return err
	}
	response, err := s.Client.Delete(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	return err
}

/*
DeleteIdentityProvider - identity service endpoint
Deletes the Identity Provider.
Parameters:

	idp: The Identity Provider name.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) DeleteIdentityProvider(idp string, resp ...*http.Response) error {
	pp := struct {
		Idp string
	}{
		Idp: idp,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/identityproviders/{{.Idp}}`, pp)
	if err != nil {
		return err
	}
	response, err := s.Client.Delete(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	return err
}

/*
DeletePrincipalPublicKey - identity service endpoint
Deletes principal public key
Parameters:

	principal: The principal name.
	keyId: Identifier of a public key.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) DeletePrincipalPublicKey(principal string, keyId string, resp ...*http.Response) error {
	pp := struct {
		Principal string
		KeyId     string
	}{
		Principal: principal,
		KeyId:     keyId,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/system/identity/v3/principals/{{.Principal}}/keys/{{.KeyId}}`, pp)
	if err != nil {
		return err
	}
	response, err := s.Client.Delete(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	return err
}

/*
DeleteRole - identity service endpoint
Deletes a defined role for a given tenant.
Parameters:

	role: The role name.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) DeleteRole(role string, resp ...*http.Response) error {
	pp := struct {
		Role string
	}{
		Role: role,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/roles/{{.Role}}`, pp)
	if err != nil {
		return err
	}
	response, err := s.Client.Delete(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	return err
}

/*
DeleteSamlClient - identity service endpoint
Deletes the SAML client.
Parameters:

	samlClient: The saml client name.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) DeleteSamlClient(samlClient string, resp ...*http.Response) error {
	pp := struct {
		SamlClient string
	}{
		SamlClient: samlClient,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/clients/saml/{{.SamlClient}}`, pp)
	if err != nil {
		return err
	}
	response, err := s.Client.Delete(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	return err
}

/*
GetEntitlements - identity service endpoint
Returns the entitlements for the given tenant and client id
Parameters:

	entitlementClientId: ID of the client for commerce entitlements
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) GetEntitlements(entitlementClientId string, resp ...*http.Response) (*EntitlementList, error) {
	pp := struct {
		EntitlementClientId string
	}{
		EntitlementClientId: entitlementClientId,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/commerce/subscribed-apps/{{.EntitlementClientId}}/entitlements`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb EntitlementList
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
GetGroup - identity service endpoint
Returns information about a given group within a tenant.
Parameters:

	group: The group name.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) GetGroup(group string, resp ...*http.Response) (*Group, error) {
	pp := struct {
		Group string
	}{
		Group: group,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/groups/{{.Group}}`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb Group
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
GetGroupMember - identity service endpoint
Returns information about a given member within a given group.
Parameters:

	group: The group name.
	member: The member name.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) GetGroupMember(group string, member string, resp ...*http.Response) (*GroupMember, error) {
	pp := struct {
		Group  string
		Member string
	}{
		Group:  group,
		Member: member,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/groups/{{.Group}}/members/{{.Member}}`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb GroupMember
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
GetGroupRole - identity service endpoint
Returns information about a given role within a given group.
Parameters:

	group: The group name.
	role: The role name.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) GetGroupRole(group string, role string, resp ...*http.Response) (*GroupRole, error) {
	pp := struct {
		Group string
		Role  string
	}{
		Group: group,
		Role:  role,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/groups/{{.Group}}/roles/{{.Role}}`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb GroupRole
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
GetIdentityProvider - identity service endpoint
Returns the Identity Provider for the given tenant.
Parameters:

	idp: The Identity Provider name.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) GetIdentityProvider(idp string, resp ...*http.Response) (*IdentityProviderBody, error) {
	pp := struct {
		Idp string
	}{
		Idp: idp,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/identityproviders/{{.Idp}}`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb IdentityProviderBody
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
GetMember - identity service endpoint
Returns a member of a given tenant.
Parameters:

	member: The member name.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) GetMember(member string, resp ...*http.Response) (*Member, error) {
	pp := struct {
		Member string
	}{
		Member: member,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/members/{{.Member}}`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb Member
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
GetPrincipal - identity service endpoint
Returns the details of a principal, including its tenant membership and any relevant profile information.
Parameters:

	principal: The principal name.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) GetPrincipal(principal string, resp ...*http.Response) (*Principal, error) {
	pp := struct {
		Principal string
	}{
		Principal: principal,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/system/identity/v3/principals/{{.Principal}}`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb Principal
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
GetPrincipalPublicKey - identity service endpoint
Returns principal public key
Parameters:

	principal: The principal name.
	keyId: Identifier of a public key.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) GetPrincipalPublicKey(principal string, keyId string, resp ...*http.Response) (*PrincipalPublicKey, error) {
	pp := struct {
		Principal string
		KeyId     string
	}{
		Principal: principal,
		KeyId:     keyId,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/system/identity/v3/principals/{{.Principal}}/keys/{{.KeyId}}`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb PrincipalPublicKey
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
GetPrincipalPublicKeys - identity service endpoint
Returns principal public keys
Parameters:

	principal: The principal name.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) GetPrincipalPublicKeys(principal string, resp ...*http.Response) (*PrincipalPublicKeys, error) {
	pp := struct {
		Principal string
	}{
		Principal: principal,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/system/identity/v3/principals/{{.Principal}}/keys`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb PrincipalPublicKeys
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
GetRole - identity service endpoint
Returns a role for a given tenant.
Parameters:

	role: The role name.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) GetRole(role string, resp ...*http.Response) (*Role, error) {
	pp := struct {
		Role string
	}{
		Role: role,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/roles/{{.Role}}`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb Role
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
GetRolePermission - identity service endpoint
Gets a permission for the specified role.
Parameters:

	role: The role name.
	permission: The permission string.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) GetRolePermission(role string, permission string, resp ...*http.Response) (*RolePermission, error) {
	pp := struct {
		Role       string
		Permission string
	}{
		Role:       role,
		Permission: permission,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/roles/{{.Role}}/permissions/{{.Permission}}`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb RolePermission
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
GetSamlClient - identity service endpoint
Returns the SAML client.
Parameters:

	samlClient: The saml client name.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) GetSamlClient(samlClient string, resp ...*http.Response) (*SamlClient, error) {
	pp := struct {
		SamlClient string
	}{
		SamlClient: samlClient,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/clients/saml/{{.SamlClient}}`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb SamlClient
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
ListGroupMembers - identity service endpoint
Returns a list of the members within a given group.
Parameters:

	group: The group name.
	query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ListGroupMembers(group string, query *ListGroupMembersQueryParams, resp ...*http.Response) (*GroupMemberList, error) {
	values := util.ParseURLParams(query)
	pp := struct {
		Group string
	}{
		Group: group,
	}
	u, err := s.Client.BuildURLFromPathParams(values, serviceCluster, `/identity/v3/groups/{{.Group}}/members`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb GroupMemberList
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
ListGroupRoles - identity service endpoint
Returns a list of the roles that are attached to a group within a given tenant.
Parameters:

	group: The group name.
	query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ListGroupRoles(group string, query *ListGroupRolesQueryParams, resp ...*http.Response) (*GroupRoleList, error) {
	values := util.ParseURLParams(query)
	pp := struct {
		Group string
	}{
		Group: group,
	}
	u, err := s.Client.BuildURLFromPathParams(values, serviceCluster, `/identity/v3/groups/{{.Group}}/roles`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb GroupRoleList
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
ListGroups - identity service endpoint
List the groups that exist in a given tenant.
Parameters:

	query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ListGroups(query *ListGroupsQueryParams, resp ...*http.Response) (*GroupList, error) {
	values := util.ParseURLParams(query)
	u, err := s.Client.BuildURLFromPathParams(values, serviceCluster, `/identity/v3/groups`, nil)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb GroupList
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
ListIdentityProvider - identity service endpoint
Returns the list of Identity Providers for the given tenant.
Parameters:

	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ListIdentityProvider(resp ...*http.Response) ([]IdentityProviderBody, error) {
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/identityproviders`, nil)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb []IdentityProviderBody
	err = util.ParseResponse(&rb, response)
	return rb, err
}

/*
ListMemberGroups - identity service endpoint
Returns a list of groups that a member belongs to within a tenant.
Parameters:

	member: The member name.
	query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ListMemberGroups(member string, query *ListMemberGroupsQueryParams, resp ...*http.Response) (*GroupList, error) {
	values := util.ParseURLParams(query)
	pp := struct {
		Member string
	}{
		Member: member,
	}
	u, err := s.Client.BuildURLFromPathParams(values, serviceCluster, `/identity/v3/members/{{.Member}}/groups`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb GroupList
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
ListMemberPermissions - identity service endpoint
Returns a set of permissions granted to the member within the tenant.
Parameters:

	member: The member name.
	query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ListMemberPermissions(member string, query *ListMemberPermissionsQueryParams, resp ...*http.Response) (*PermissionList, error) {
	values := util.ParseURLParams(query)
	pp := struct {
		Member string
	}{
		Member: member,
	}
	u, err := s.Client.BuildURLFromPathParams(values, serviceCluster, `/identity/v3/members/{{.Member}}/permissions`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb PermissionList
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
ListMemberRoles - identity service endpoint
Returns a set of roles that a given member holds within the tenant.
Parameters:

	member: The member name.
	query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ListMemberRoles(member string, query *ListMemberRolesQueryParams, resp ...*http.Response) (*RoleList, error) {
	values := util.ParseURLParams(query)
	pp := struct {
		Member string
	}{
		Member: member,
	}
	u, err := s.Client.BuildURLFromPathParams(values, serviceCluster, `/identity/v3/members/{{.Member}}/roles`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb RoleList
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
ListMembers - identity service endpoint
Returns a list of members in a given tenant.
Parameters:

	query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ListMembers(query *ListMembersQueryParams, resp ...*http.Response) (*MemberList, error) {
	values := util.ParseURLParams(query)
	u, err := s.Client.BuildURLFromPathParams(values, serviceCluster, `/identity/v3/members`, nil)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb MemberList
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
ListPrincipals - identity service endpoint
Returns the list of principals that the Identity service knows about.
Parameters:

	query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ListPrincipals(query *ListPrincipalsQueryParams, resp ...*http.Response) (*PrincipalList, error) {
	values := util.ParseURLParams(query)
	u, err := s.Client.BuildURLFromPathParams(values, serviceCluster, `/system/identity/v3/principals`, nil)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb PrincipalList
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
ListRoleGroups - identity service endpoint
Gets a list of groups for a role in a given tenant.
Parameters:

	role: The role name.
	query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ListRoleGroups(role string, query *ListRoleGroupsQueryParams, resp ...*http.Response) (*GroupList, error) {
	values := util.ParseURLParams(query)
	pp := struct {
		Role string
	}{
		Role: role,
	}
	u, err := s.Client.BuildURLFromPathParams(values, serviceCluster, `/identity/v3/roles/{{.Role}}/groups`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb GroupList
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
ListRolePermissions - identity service endpoint
Gets the permissions for a role in a given tenant.
Parameters:

	role: The role name.
	query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ListRolePermissions(role string, query *ListRolePermissionsQueryParams, resp ...*http.Response) (*RolePermissionList, error) {
	values := util.ParseURLParams(query)
	pp := struct {
		Role string
	}{
		Role: role,
	}
	u, err := s.Client.BuildURLFromPathParams(values, serviceCluster, `/identity/v3/roles/{{.Role}}/permissions`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb RolePermissionList
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
ListRoles - identity service endpoint
Returns all roles for a given tenant.
Parameters:

	query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ListRoles(query *ListRolesQueryParams, resp ...*http.Response) (*RoleList, error) {
	values := util.ParseURLParams(query)
	u, err := s.Client.BuildURLFromPathParams(values, serviceCluster, `/identity/v3/roles`, nil)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb RoleList
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
ListSamlClients - identity service endpoint
List SAML clients.
Parameters:

	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ListSamlClients(resp ...*http.Response) (*SamlClientsList, error) {
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/clients/saml`, nil)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb SamlClientsList
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
RemoveGroupMember - identity service endpoint
Removes the member from a given group.
Parameters:

	group: The group name.
	member: The member name.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) RemoveGroupMember(group string, member string, resp ...*http.Response) error {
	pp := struct {
		Group  string
		Member string
	}{
		Group:  group,
		Member: member,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/groups/{{.Group}}/members/{{.Member}}`, pp)
	if err != nil {
		return err
	}
	response, err := s.Client.Delete(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	return err
}

/*
RemoveGroupRole - identity service endpoint
Removes a role from a given group.
Parameters:

	group: The group name.
	role: The role name.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) RemoveGroupRole(group string, role string, resp ...*http.Response) error {
	pp := struct {
		Group string
		Role  string
	}{
		Group: group,
		Role:  role,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/groups/{{.Group}}/roles/{{.Role}}`, pp)
	if err != nil {
		return err
	}
	response, err := s.Client.Delete(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	return err
}

/*
RemoveMember - identity service endpoint
Removes a member from a given tenant
Parameters:

	member: The member name.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) RemoveMember(member string, resp ...*http.Response) error {
	pp := struct {
		Member string
	}{
		Member: member,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/members/{{.Member}}`, pp)
	if err != nil {
		return err
	}
	response, err := s.Client.Delete(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	return err
}

/*
RemoveRolePermission - identity service endpoint
Removes a permission from the role.
Parameters:

	role: The role name.
	permission: The permission string.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) RemoveRolePermission(role string, permission string, resp ...*http.Response) error {
	pp := struct {
		Role       string
		Permission string
	}{
		Role:       role,
		Permission: permission,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/roles/{{.Role}}/permissions/{{.Permission}}`, pp)
	if err != nil {
		return err
	}
	response, err := s.Client.Delete(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	return err
}

/*
ResetPassword - identity service endpoint
Sends an email which allows a principal to reset a forgotten password.
Parameters:

	resetPasswordBody: The principal information to recover password.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ResetPassword(resetPasswordBody ResetPasswordBody, resp ...*http.Response) error {
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/system/identity/v3/reset-password`, nil)
	if err != nil {
		return err
	}
	response, err := s.Client.Post(services.RequestParams{URL: u, Body: resetPasswordBody})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	return err
}

/*
RevokePrincipalAuthTokens - identity service endpoint
Revoke all existing access tokens issued to a principal. Principals can reset their password by visiting https://login.splunk.com/en_us/page/lost_password
Parameters:

	principal: The principal name.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) RevokePrincipalAuthTokens(principal string, resp ...*http.Response) error {
	pp := struct {
		Principal string
	}{
		Principal: principal,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/system/identity/v3/principals/{{.Principal}}/revoke`, pp)
	if err != nil {
		return err
	}
	response, err := s.Client.Post(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	return err
}

/*
UpdateEntitlements - identity service endpoint
Update the entitlements for the given tenant and client id
Parameters:

	entitlementClientId: ID of the client for commerce entitlements
	setEntitlement: The desired entitlements to be set
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) UpdateEntitlements(entitlementClientId string, setEntitlement []SetEntitlement, resp ...*http.Response) (*EntitlementList, error) {
	pp := struct {
		EntitlementClientId string
	}{
		EntitlementClientId: entitlementClientId,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/commerce/subscribed-apps/{{.EntitlementClientId}}/entitlements`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Put(services.RequestParams{URL: u, Body: setEntitlement})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb EntitlementList
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
UpdateGroup - identity service endpoint
Updates a group&#39;s display name or description.
Parameters:

	group: The group name.
	updateGroupBody: The updated group information
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) UpdateGroup(group string, updateGroupBody UpdateGroupBody, resp ...*http.Response) (*Group, error) {
	pp := struct {
		Group string
	}{
		Group: group,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/groups/{{.Group}}`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Patch(services.RequestParams{URL: u, Body: updateGroupBody})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb Group
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
UpdateIdentityProvider - identity service endpoint
Update the configuration for an Identity Provider.
Parameters:

	idp: The Identity Provider name.
	identityProviderConfigBody: The properties to update the Identity Provider with.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) UpdateIdentityProvider(idp string, identityProviderConfigBody IdentityProviderConfigBody, resp ...*http.Response) (*IdentityProviderBody, error) {
	pp := struct {
		Idp string
	}{
		Idp: idp,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/identityproviders/{{.Idp}}`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Put(services.RequestParams{URL: u, Body: identityProviderConfigBody})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb IdentityProviderBody
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
UpdatePassword - identity service endpoint
Update principal password
Parameters:

	principal: The principal name.
	updatePasswordBody: The new password to set for the principal.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) UpdatePassword(principal string, updatePasswordBody UpdatePasswordBody, resp ...*http.Response) error {
	pp := struct {
		Principal string
	}{
		Principal: principal,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/system/identity/v3/principals/{{.Principal}}/password`, pp)
	if err != nil {
		return err
	}
	response, err := s.Client.Patch(services.RequestParams{URL: u, Body: updatePasswordBody})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	return err
}

/*
UpdatePrincipalPublicKey - identity service endpoint
Update principal public key
Parameters:

	principal: The principal name.
	keyId: Identifier of a public key.
	principalPublicKeyStatusBody: Status of the public key
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) UpdatePrincipalPublicKey(principal string, keyId string, principalPublicKeyStatusBody PrincipalPublicKeyStatusBody, resp ...*http.Response) (*PrincipalPublicKey, error) {
	pp := struct {
		Principal string
		KeyId     string
	}{
		Principal: principal,
		KeyId:     keyId,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/system/identity/v3/principals/{{.Principal}}/keys/{{.KeyId}}`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Put(services.RequestParams{URL: u, Body: principalPublicKeyStatusBody})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb PrincipalPublicKey
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
UpdateRole - identity service endpoint
Update a role&#39;s display name or description for a given tenant.
Parameters:

	role: The role name.
	updateRoleBody: The updated role information
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) UpdateRole(role string, updateRoleBody UpdateRoleBody, resp ...*http.Response) (*Role, error) {
	pp := struct {
		Role string
	}{
		Role: role,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/roles/{{.Role}}`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Patch(services.RequestParams{URL: u, Body: updateRoleBody})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb Role
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
UpdateSamlClient - identity service endpoint
Update the SAML client.
Parameters:

	samlClient: The saml client name.
	updateSamlClientBody
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) UpdateSamlClient(samlClient string, updateSamlClientBody UpdateSamlClientBody, resp ...*http.Response) (*SamlClient, error) {
	pp := struct {
		SamlClient string
	}{
		SamlClient: samlClient,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/identity/v3/clients/saml/{{.SamlClient}}`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Put(services.RequestParams{URL: u, Body: updateSamlClientBody})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb SamlClient
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
ValidateToken - identity service endpoint
Validates the access token obtained from the authorization header and returns the principal name and tenant memberships.
Parameters:

	query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ValidateToken(query *ValidateTokenQueryParams, resp ...*http.Response) (*ValidateInfo, error) {
	values := util.ParseURLParams(query)
	u, err := s.Client.BuildURLFromPathParams(values, serviceCluster, `/identity/v3/validate`, nil)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb ValidateInfo
	err = util.ParseResponse(&rb, response)
	return &rb, err
}
