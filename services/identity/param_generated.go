/*
 * Copyright Â© 2022 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Identity
 *
 * With the Identity service in Splunk Cloud Services, you can authenticate and authorize Splunk Cloud Services users.
 *
 * API version: v3.6 (recommended default)
 * Generated by: OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
 */

package identity

// CreatePrincipalQueryParams represents valid query parameters for the CreatePrincipal operation
// For convenience CreatePrincipalQueryParams can be formed in a single statement, for example:
//     `v := CreatePrincipalQueryParams{}.SetInviteId(...)`
type CreatePrincipalQueryParams struct {
	// InviteId : The invite ID.
	InviteId string `key:"inviteID"`
}

func (q CreatePrincipalQueryParams) SetInviteId(v string) CreatePrincipalQueryParams {
	q.InviteId = v
	return q
}

// ListGroupMembersQueryParams represents valid query parameters for the ListGroupMembers operation
// For convenience ListGroupMembersQueryParams can be formed in a single statement, for example:
//     `v := ListGroupMembersQueryParams{}.SetOrderby(...).SetPageSize(...).SetPageToken(...)`
type ListGroupMembersQueryParams struct {
	// Orderby : The sorting order for returning list.
	Orderby string `key:"orderby"`
	// PageSize : The maximize return items count of a list.
	PageSize *int32 `key:"page_size"`
	// PageToken : The cursor to then next page.
	PageToken string `key:"page_token"`
}

func (q ListGroupMembersQueryParams) SetOrderby(v string) ListGroupMembersQueryParams {
	q.Orderby = v
	return q
}

func (q ListGroupMembersQueryParams) SetPageSize(v int32) ListGroupMembersQueryParams {
	q.PageSize = &v
	return q
}

func (q ListGroupMembersQueryParams) SetPageToken(v string) ListGroupMembersQueryParams {
	q.PageToken = v
	return q
}

// ListGroupRolesQueryParams represents valid query parameters for the ListGroupRoles operation
// For convenience ListGroupRolesQueryParams can be formed in a single statement, for example:
//     `v := ListGroupRolesQueryParams{}.SetOrderby(...).SetPageSize(...).SetPageToken(...)`
type ListGroupRolesQueryParams struct {
	// Orderby : The sorting order for returning list.
	Orderby string `key:"orderby"`
	// PageSize : The maximize return items count of a list.
	PageSize *int32 `key:"page_size"`
	// PageToken : The cursor to then next page.
	PageToken string `key:"page_token"`
}

func (q ListGroupRolesQueryParams) SetOrderby(v string) ListGroupRolesQueryParams {
	q.Orderby = v
	return q
}

func (q ListGroupRolesQueryParams) SetPageSize(v int32) ListGroupRolesQueryParams {
	q.PageSize = &v
	return q
}

func (q ListGroupRolesQueryParams) SetPageToken(v string) ListGroupRolesQueryParams {
	q.PageToken = v
	return q
}

// ListGroupsQueryParams represents valid query parameters for the ListGroups operation
// For convenience ListGroupsQueryParams can be formed in a single statement, for example:
//     `v := ListGroupsQueryParams{}.SetAccess(...).SetOrderby(...).SetPageSize(...).SetPageToken(...)`
type ListGroupsQueryParams struct {
	// Access : List only the groups with specified access permission.
	Access ListGroupsaccess `key:"access"`
	// Orderby : The sorting order for returning list.
	Orderby string `key:"orderby"`
	// PageSize : The maximize return items count of a list.
	PageSize *int32 `key:"page_size"`
	// PageToken : The cursor to then next page.
	PageToken string `key:"page_token"`
}

func (q ListGroupsQueryParams) SetAccess(v ListGroupsaccess) ListGroupsQueryParams {
	q.Access = v
	return q
}

func (q ListGroupsQueryParams) SetOrderby(v string) ListGroupsQueryParams {
	q.Orderby = v
	return q
}

func (q ListGroupsQueryParams) SetPageSize(v int32) ListGroupsQueryParams {
	q.PageSize = &v
	return q
}

func (q ListGroupsQueryParams) SetPageToken(v string) ListGroupsQueryParams {
	q.PageToken = v
	return q
}

// ListGroupsaccess : List only the groups with specified access permission.
type ListGroupsaccess string

// List of ListGroupsaccess values
const (
	ListGroupsaccessWrite ListGroupsaccess = "write"
)

// ListMemberGroupsQueryParams represents valid query parameters for the ListMemberGroups operation
// For convenience ListMemberGroupsQueryParams can be formed in a single statement, for example:
//     `v := ListMemberGroupsQueryParams{}.SetOrderby(...).SetPageSize(...).SetPageToken(...)`
type ListMemberGroupsQueryParams struct {
	// Orderby : The sorting order for returning list.
	Orderby string `key:"orderby"`
	// PageSize : The maximize return items count of a list.
	PageSize *int32 `key:"page_size"`
	// PageToken : The cursor to then next page.
	PageToken string `key:"page_token"`
}

func (q ListMemberGroupsQueryParams) SetOrderby(v string) ListMemberGroupsQueryParams {
	q.Orderby = v
	return q
}

func (q ListMemberGroupsQueryParams) SetPageSize(v int32) ListMemberGroupsQueryParams {
	q.PageSize = &v
	return q
}

func (q ListMemberGroupsQueryParams) SetPageToken(v string) ListMemberGroupsQueryParams {
	q.PageToken = v
	return q
}

// ListMemberPermissionsQueryParams represents valid query parameters for the ListMemberPermissions operation
// For convenience ListMemberPermissionsQueryParams can be formed in a single statement, for example:
//     `v := ListMemberPermissionsQueryParams{}.SetOrderby(...).SetPageSize(...).SetPageToken(...).SetScopeFilter(...)`
type ListMemberPermissionsQueryParams struct {
	// Orderby : The sorting order for returning list.
	Orderby string `key:"orderby"`
	// PageSize : The maximize return items count of a list.
	PageSize *int32 `key:"page_size"`
	// PageToken : The cursor to then next page.
	PageToken string `key:"page_token"`
	// ScopeFilter : List only the permissions matching the scope filter.
	ScopeFilter string `key:"scope_filter"`
}

func (q ListMemberPermissionsQueryParams) SetOrderby(v string) ListMemberPermissionsQueryParams {
	q.Orderby = v
	return q
}

func (q ListMemberPermissionsQueryParams) SetPageSize(v int32) ListMemberPermissionsQueryParams {
	q.PageSize = &v
	return q
}

func (q ListMemberPermissionsQueryParams) SetPageToken(v string) ListMemberPermissionsQueryParams {
	q.PageToken = v
	return q
}

func (q ListMemberPermissionsQueryParams) SetScopeFilter(v string) ListMemberPermissionsQueryParams {
	q.ScopeFilter = v
	return q
}

// ListMemberRolesQueryParams represents valid query parameters for the ListMemberRoles operation
// For convenience ListMemberRolesQueryParams can be formed in a single statement, for example:
//     `v := ListMemberRolesQueryParams{}.SetOrderby(...).SetPageSize(...).SetPageToken(...)`
type ListMemberRolesQueryParams struct {
	// Orderby : The sorting order for returning list.
	Orderby string `key:"orderby"`
	// PageSize : The maximize return items count of a list.
	PageSize *int32 `key:"page_size"`
	// PageToken : The cursor to then next page.
	PageToken string `key:"page_token"`
}

func (q ListMemberRolesQueryParams) SetOrderby(v string) ListMemberRolesQueryParams {
	q.Orderby = v
	return q
}

func (q ListMemberRolesQueryParams) SetPageSize(v int32) ListMemberRolesQueryParams {
	q.PageSize = &v
	return q
}

func (q ListMemberRolesQueryParams) SetPageToken(v string) ListMemberRolesQueryParams {
	q.PageToken = v
	return q
}

// ListMembersQueryParams represents valid query parameters for the ListMembers operation
// For convenience ListMembersQueryParams can be formed in a single statement, for example:
//     `v := ListMembersQueryParams{}.SetKind(...).SetOrderby(...).SetPageSize(...).SetPageToken(...)`
type ListMembersQueryParams struct {
	// Kind : Kind of member, one of: [user, service_account, service]
	Kind ListMemberskind `key:"kind"`
	// Orderby : The sorting order for returning list.
	Orderby string `key:"orderby"`
	// PageSize : The maximize return items count of a list.
	PageSize *int32 `key:"page_size"`
	// PageToken : The cursor to then next page.
	PageToken string `key:"page_token"`
}

func (q ListMembersQueryParams) SetKind(v ListMemberskind) ListMembersQueryParams {
	q.Kind = v
	return q
}

func (q ListMembersQueryParams) SetOrderby(v string) ListMembersQueryParams {
	q.Orderby = v
	return q
}

func (q ListMembersQueryParams) SetPageSize(v int32) ListMembersQueryParams {
	q.PageSize = &v
	return q
}

func (q ListMembersQueryParams) SetPageToken(v string) ListMembersQueryParams {
	q.PageToken = v
	return q
}

// ListMemberskind : Kind of member, one of: [user, service_account, service]
type ListMemberskind string

// List of ListMemberskind values
const (
	ListMemberskindUser           ListMemberskind = "user"
	ListMemberskindServiceAccount ListMemberskind = "service_account"
	ListMemberskindService        ListMemberskind = "service"
)

// ListPrincipalsQueryParams represents valid query parameters for the ListPrincipals operation
// For convenience ListPrincipalsQueryParams can be formed in a single statement, for example:
//     `v := ListPrincipalsQueryParams{}.SetOrderby(...).SetPageSize(...).SetPageToken(...)`
type ListPrincipalsQueryParams struct {
	// Orderby : The sorting order for returning list.
	Orderby string `key:"orderby"`
	// PageSize : The maximize return items count of a list.
	PageSize *int32 `key:"page_size"`
	// PageToken : The cursor to then next page.
	PageToken string `key:"page_token"`
}

func (q ListPrincipalsQueryParams) SetOrderby(v string) ListPrincipalsQueryParams {
	q.Orderby = v
	return q
}

func (q ListPrincipalsQueryParams) SetPageSize(v int32) ListPrincipalsQueryParams {
	q.PageSize = &v
	return q
}

func (q ListPrincipalsQueryParams) SetPageToken(v string) ListPrincipalsQueryParams {
	q.PageToken = v
	return q
}

// ListRoleGroupsQueryParams represents valid query parameters for the ListRoleGroups operation
// For convenience ListRoleGroupsQueryParams can be formed in a single statement, for example:
//     `v := ListRoleGroupsQueryParams{}.SetOrderby(...).SetPageSize(...).SetPageToken(...)`
type ListRoleGroupsQueryParams struct {
	// Orderby : The sorting order for returning list.
	Orderby string `key:"orderby"`
	// PageSize : The maximize return items count of a list.
	PageSize *int32 `key:"page_size"`
	// PageToken : The cursor to then next page.
	PageToken string `key:"page_token"`
}

func (q ListRoleGroupsQueryParams) SetOrderby(v string) ListRoleGroupsQueryParams {
	q.Orderby = v
	return q
}

func (q ListRoleGroupsQueryParams) SetPageSize(v int32) ListRoleGroupsQueryParams {
	q.PageSize = &v
	return q
}

func (q ListRoleGroupsQueryParams) SetPageToken(v string) ListRoleGroupsQueryParams {
	q.PageToken = v
	return q
}

// ListRolePermissionsQueryParams represents valid query parameters for the ListRolePermissions operation
// For convenience ListRolePermissionsQueryParams can be formed in a single statement, for example:
//     `v := ListRolePermissionsQueryParams{}.SetOrderby(...).SetPageSize(...).SetPageToken(...)`
type ListRolePermissionsQueryParams struct {
	// Orderby : The sorting order for returning list.
	Orderby string `key:"orderby"`
	// PageSize : The maximize return items count of a list.
	PageSize *int32 `key:"page_size"`
	// PageToken : The cursor to then next page.
	PageToken string `key:"page_token"`
}

func (q ListRolePermissionsQueryParams) SetOrderby(v string) ListRolePermissionsQueryParams {
	q.Orderby = v
	return q
}

func (q ListRolePermissionsQueryParams) SetPageSize(v int32) ListRolePermissionsQueryParams {
	q.PageSize = &v
	return q
}

func (q ListRolePermissionsQueryParams) SetPageToken(v string) ListRolePermissionsQueryParams {
	q.PageToken = v
	return q
}

// ListRolesQueryParams represents valid query parameters for the ListRoles operation
// For convenience ListRolesQueryParams can be formed in a single statement, for example:
//     `v := ListRolesQueryParams{}.SetOrderby(...).SetPageSize(...).SetPageToken(...)`
type ListRolesQueryParams struct {
	// Orderby : The sorting order for returning list.
	Orderby string `key:"orderby"`
	// PageSize : The maximize return items count of a list.
	PageSize *int32 `key:"page_size"`
	// PageToken : The cursor to then next page.
	PageToken string `key:"page_token"`
}

func (q ListRolesQueryParams) SetOrderby(v string) ListRolesQueryParams {
	q.Orderby = v
	return q
}

func (q ListRolesQueryParams) SetPageSize(v int32) ListRolesQueryParams {
	q.PageSize = &v
	return q
}

func (q ListRolesQueryParams) SetPageToken(v string) ListRolesQueryParams {
	q.PageToken = v
	return q
}

// ValidateTokenQueryParams represents valid query parameters for the ValidateToken operation
// For convenience ValidateTokenQueryParams can be formed in a single statement, for example:
//     `v := ValidateTokenQueryParams{}.SetInclude(...)`
type ValidateTokenQueryParams struct {
	// Include : Include additional information to return when validating tenant membership. Valid parameters [tenant, principal]
	Include ValidateTokeninclude `key:"include"`
}

func (q ValidateTokenQueryParams) SetInclude(v ValidateTokeninclude) ValidateTokenQueryParams {
	q.Include = v
	return q
}

// ValidateTokeninclude : Include additional information to return when validating tenant membership. Valid parameters [tenant, principal]
type ValidateTokeninclude []ValidateTokenincludeEnum

// ValidateTokenincludeEnum : Include additional information to return when validating tenant membership. Valid parameters [tenant, principal]
type ValidateTokenincludeEnum string

// List of ValidateTokeninclude values
const (
	ValidateTokenincludeTenant    ValidateTokenincludeEnum = "tenant"
	ValidateTokenincludePrincipal ValidateTokenincludeEnum = "principal"
)
