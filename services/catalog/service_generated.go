/*
 * Copyright Â© 2022 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Search Catalog service
 *
 * With the Metadata Catalog in Splunk Cloud Services you can create and manage knowledge objects such as datasets, fields, rules, actions, and dashboards.
 *
 * API version: v2beta1.4 (recommended default)
 * Generated by: OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
 */

package catalog

import (
	"net/http"

	"github.com/khulnasoft-lab/go-dependencies/services"
	"github.com/khulnasoft-lab/go-dependencies/util"
)

const serviceCluster = "api"

type Service services.BaseService

// NewService creates a new catalog service client from the given Config
func NewService(iClient services.IClient) *Service {
	return &Service{Client: iClient}
}

/*
CreateActionForRule - catalog service endpoint
Creates a new action for the specified rule by rule id or resource name.
Parameters:

	ruleresource: The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
	actionPost: The JSON representation of the action to be persisted.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) CreateActionForRule(ruleresource string, actionPost ActionPost, resp ...*http.Response) (*Action, error) {
	pp := struct {
		Ruleresource string
	}{
		Ruleresource: ruleresource,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/catalog/v2beta1/rules/{{.Ruleresource}}/actions`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Post(services.RequestParams{URL: u, Body: actionPost})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb Action
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
CreateAnnotationForDashboard - catalog service endpoint
Creates a new annotation for the specified dashboard.
Parameters:

	dashboardresource: ID or the resource name of a dashvboard. The resource name format is module.dashboardname.
	requestBody: The JSON representation of the annotation to be persisted.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) CreateAnnotationForDashboard(dashboardresource string, requestBody map[string]string, resp ...*http.Response) (*Annotation, error) {
	pp := struct {
		Dashboardresource string
	}{
		Dashboardresource: dashboardresource,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/catalog/v2beta1/dashboards/{{.Dashboardresource}}/annotations`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Post(services.RequestParams{URL: u, Body: requestBody})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb Annotation
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
CreateAnnotationForDataset - catalog service endpoint
Creates a new annotation for the specified dataset.
Parameters:

	datasetresource: ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
	requestBody: The JSON representation of the annotation to be persisted.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) CreateAnnotationForDataset(datasetresource string, requestBody map[string]string, resp ...*http.Response) (*Annotation, error) {
	pp := struct {
		Datasetresource string
	}{
		Datasetresource: datasetresource,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/catalog/v2beta1/datasets/{{.Datasetresource}}/annotations`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Post(services.RequestParams{URL: u, Body: requestBody})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb Annotation
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
CreateDashboard - catalog service endpoint
Creates a new dashboard.
Parameters:

	dashboardPost: The JSON representation of the Dashboard to be persisted.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) CreateDashboard(dashboardPost DashboardPost, resp ...*http.Response) (*Dashboard, error) {
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/catalog/v2beta1/dashboards`, nil)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Post(services.RequestParams{URL: u, Body: dashboardPost})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb Dashboard
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
CreateDataset - catalog service endpoint
Creates a new dataset.
Parameters:

	datasetPost: JSON representation of the DatasetInfo to be persisted
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) CreateDataset(datasetPost DatasetPost, resp ...*http.Response) (*Dataset, error) {
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/catalog/v2beta1/datasets`, nil)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Post(services.RequestParams{URL: u, Body: datasetPost})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb Dataset
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
CreateDatasetImport - catalog service endpoint
Creates a new dataset import using the ID or resource name of the imported dataset.
Parameters:

	datasetresource: ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
	datasetImportedBy
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) CreateDatasetImport(datasetresource string, datasetImportedBy DatasetImportedBy, resp ...*http.Response) (*DatasetImportedBy, error) {
	pp := struct {
		Datasetresource string
	}{
		Datasetresource: datasetresource,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/catalog/v2beta1/datasets/{{.Datasetresource}}/imported-by`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Post(services.RequestParams{URL: u, Body: datasetImportedBy})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb DatasetImportedBy
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
CreateFieldForDataset - catalog service endpoint
Adds a new field to the dataset with the specified ID or resource name.
Parameters:

	datasetresource: ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
	fieldPost: The JSON representation of the field to be persisted.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) CreateFieldForDataset(datasetresource string, fieldPost FieldPost, resp ...*http.Response) (*Field, error) {
	pp := struct {
		Datasetresource string
	}{
		Datasetresource: datasetresource,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/catalog/v2beta1/datasets/{{.Datasetresource}}/fields`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Post(services.RequestParams{URL: u, Body: fieldPost})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb Field
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
CreateRelationship - catalog service endpoint
Creates a new relationship.
Parameters:

	relationshipPost: The JSON representation of the relationship to persist.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) CreateRelationship(relationshipPost RelationshipPost, resp ...*http.Response) (*Relationship, error) {
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/catalog/v2beta1/relationships`, nil)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Post(services.RequestParams{URL: u, Body: relationshipPost})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb Relationship
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
CreateRule - catalog service endpoint
Creates a new rule.
Parameters:

	rulePost: The JSON representation of the rule to be persisted.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) CreateRule(rulePost RulePost, resp ...*http.Response) (*Rule, error) {
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/catalog/v2beta1/rules`, nil)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Post(services.RequestParams{URL: u, Body: rulePost})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb Rule
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
DeleteActionByIdForRule - catalog service endpoint
Deletes the action with the specified ID that is associated with the specified rule.
Parameters:

	ruleresource: The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
	actionid: ID of an Action.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) DeleteActionByIdForRule(ruleresource string, actionid string, resp ...*http.Response) error {
	pp := struct {
		Ruleresource string
		Actionid     string
	}{
		Ruleresource: ruleresource,
		Actionid:     actionid,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/catalog/v2beta1/rules/{{.Ruleresource}}/actions/{{.Actionid}}`, pp)
	if err != nil {
		return err
	}
	response, err := s.Client.Delete(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	return err
}

/*
DeleteAnnotationOfDashboard - catalog service endpoint
Deletes the annotation with the speciifed ID that is associted with the specified dashboard.
Parameters:

	dashboardresource: ID or the resource name of a dashvboard. The resource name format is module.dashboardname.
	annotationid: ID of a annotation.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) DeleteAnnotationOfDashboard(dashboardresource string, annotationid string, resp ...*http.Response) error {
	pp := struct {
		Dashboardresource string
		Annotationid      string
	}{
		Dashboardresource: dashboardresource,
		Annotationid:      annotationid,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/catalog/v2beta1/dashboards/{{.Dashboardresource}}/annotations/{{.Annotationid}}`, pp)
	if err != nil {
		return err
	}
	response, err := s.Client.Delete(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	return err
}

/*
DeleteAnnotationOfDataset - catalog service endpoint
Deletes the annotation with the specified ID that is associated with the specified dataset.
Parameters:

	datasetresource: ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
	annotationid: ID of a annotation.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) DeleteAnnotationOfDataset(datasetresource string, annotationid string, resp ...*http.Response) error {
	pp := struct {
		Datasetresource string
		Annotationid    string
	}{
		Datasetresource: datasetresource,
		Annotationid:    annotationid,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/catalog/v2beta1/datasets/{{.Datasetresource}}/annotations/{{.Annotationid}}`, pp)
	if err != nil {
		return err
	}
	response, err := s.Client.Delete(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	return err
}

/*
DeleteDashboard - catalog service endpoint
Deletes the dashboard with the specified ID or resource name.
Parameters:

	dashboardresource: ID or the resource name of a dashvboard. The resource name format is module.dashboardname.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) DeleteDashboard(dashboardresource string, resp ...*http.Response) error {
	pp := struct {
		Dashboardresource string
	}{
		Dashboardresource: dashboardresource,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/catalog/v2beta1/dashboards/{{.Dashboardresource}}`, pp)
	if err != nil {
		return err
	}
	response, err := s.Client.Delete(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	return err
}

/*
DeleteDataset - catalog service endpoint
Deletes the dataset with the specified ID or resource name. Deleting a dataset also deletes its dependent objects, such as fields.
Parameters:

	datasetresource: ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) DeleteDataset(datasetresource string, resp ...*http.Response) error {
	pp := struct {
		Datasetresource string
	}{
		Datasetresource: datasetresource,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/catalog/v2beta1/datasets/{{.Datasetresource}}`, pp)
	if err != nil {
		return err
	}
	response, err := s.Client.Delete(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	return err
}

/*
DeleteFieldByIdForDataset - catalog service endpoint
Deletes the field with the specified ID that is part of the specified dataset.
Parameters:

	datasetresource: ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
	fieldid: ID of a Field.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) DeleteFieldByIdForDataset(datasetresource string, fieldid string, resp ...*http.Response) error {
	pp := struct {
		Datasetresource string
		Fieldid         string
	}{
		Datasetresource: datasetresource,
		Fieldid:         fieldid,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/catalog/v2beta1/datasets/{{.Datasetresource}}/fields/{{.Fieldid}}`, pp)
	if err != nil {
		return err
	}
	response, err := s.Client.Delete(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	return err
}

/*
DeleteRelationshipById - catalog service endpoint
Deletes the relationship with the specified relationship ID. Deleting a relationship also deletes any objects that are dependents of that relationship, such as relationship fields.
Parameters:

	relationshipid: ID of a relationship.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) DeleteRelationshipById(relationshipid string, resp ...*http.Response) error {
	pp := struct {
		Relationshipid string
	}{
		Relationshipid: relationshipid,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/catalog/v2beta1/relationships/{{.Relationshipid}}`, pp)
	if err != nil {
		return err
	}
	response, err := s.Client.Delete(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	return err
}

/*
DeleteRule - catalog service endpoint
Deletes the rule with the specfied ID or resource name. Deleting a rule also deleletes any objects that are dependents of that rule, such as rule actions.
Parameters:

	ruleresource: The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) DeleteRule(ruleresource string, resp ...*http.Response) error {
	pp := struct {
		Ruleresource string
	}{
		Ruleresource: ruleresource,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/catalog/v2beta1/rules/{{.Ruleresource}}`, pp)
	if err != nil {
		return err
	}
	response, err := s.Client.Delete(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	return err
}

/*
GetActionByIdForRule - catalog service endpoint
Returns information about the action with the specified ID that is associated with the specified rule.
Parameters:

	ruleresource: The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
	actionid: ID of an Action.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) GetActionByIdForRule(ruleresource string, actionid string, resp ...*http.Response) (*Action, error) {
	pp := struct {
		Ruleresource string
		Actionid     string
	}{
		Ruleresource: ruleresource,
		Actionid:     actionid,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/catalog/v2beta1/rules/{{.Ruleresource}}/actions/{{.Actionid}}`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb Action
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
GetDashboard - catalog service endpoint
Returns information about the dashboard with the specified ID or resource name.
Parameters:

	dashboardresource: ID or the resource name of a dashvboard. The resource name format is module.dashboardname.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) GetDashboard(dashboardresource string, resp ...*http.Response) (*Dashboard, error) {
	pp := struct {
		Dashboardresource string
	}{
		Dashboardresource: dashboardresource,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/catalog/v2beta1/dashboards/{{.Dashboardresource}}`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb Dashboard
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
GetDataset - catalog service endpoint
Returns information about the dataset with the specified ID or resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
Parameters:

	datasetresource: ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
	query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) GetDataset(datasetresource string, query *GetDatasetQueryParams, resp ...*http.Response) (*DatasetGet, error) {
	values := util.ParseURLParams(query)
	pp := struct {
		Datasetresource string
	}{
		Datasetresource: datasetresource,
	}
	u, err := s.Client.BuildURLFromPathParams(values, serviceCluster, `/catalog/v2beta1/datasets/{{.Datasetresource}}`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb DatasetGet
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
GetFieldById - catalog service endpoint
Returns the field with the specified ID.
Parameters:

	fieldid: ID of a Field.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) GetFieldById(fieldid string, resp ...*http.Response) (*Field, error) {
	pp := struct {
		Fieldid string
	}{
		Fieldid: fieldid,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/catalog/v2beta1/fields/{{.Fieldid}}`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb Field
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
GetFieldByIdForDataset - catalog service endpoint
Returns the field with the specified ID that is part of the specified dataset.
Parameters:

	datasetresource: ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
	fieldid: ID of a Field.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) GetFieldByIdForDataset(datasetresource string, fieldid string, resp ...*http.Response) (*Field, error) {
	pp := struct {
		Datasetresource string
		Fieldid         string
	}{
		Datasetresource: datasetresource,
		Fieldid:         fieldid,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/catalog/v2beta1/datasets/{{.Datasetresource}}/fields/{{.Fieldid}}`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb Field
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
GetRelationshipById - catalog service endpoint
Returns the relationship with the specified relationship ID.
Parameters:

	relationshipid: ID of a relationship.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) GetRelationshipById(relationshipid string, resp ...*http.Response) (*Relationship, error) {
	pp := struct {
		Relationshipid string
	}{
		Relationshipid: relationshipid,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/catalog/v2beta1/relationships/{{.Relationshipid}}`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb Relationship
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
GetRule - catalog service endpoint
Returns information about rule with the specified rule ID or resource name.
Parameters:

	ruleresource: The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) GetRule(ruleresource string, resp ...*http.Response) (*Rule, error) {
	pp := struct {
		Ruleresource string
	}{
		Ruleresource: ruleresource,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/catalog/v2beta1/rules/{{.Ruleresource}}`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb Rule
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
ImportDataset - catalog service endpoint
Creates a new dataset import using the ID or resource name of the imported dataset.
Parameters:

	datasetresource: ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
	datasetImportedBy
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ImportDataset(datasetresource string, datasetImportedBy DatasetImportedBy, resp ...*http.Response) (*DatasetImportedBy, error) {
	pp := struct {
		Datasetresource string
	}{
		Datasetresource: datasetresource,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/catalog/v2beta1/datasets/{{.Datasetresource}}/importedby`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Post(services.RequestParams{URL: u, Body: datasetImportedBy})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb DatasetImportedBy
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
ListActionsForRule - catalog service endpoint
Returns the set of actions that are part of the specified rule.
Parameters:

	ruleresource: The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
	query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ListActionsForRule(ruleresource string, query *ListActionsForRuleQueryParams, resp ...*http.Response) ([]Action, error) {
	values := util.ParseURLParams(query)
	pp := struct {
		Ruleresource string
	}{
		Ruleresource: ruleresource,
	}
	u, err := s.Client.BuildURLFromPathParams(values, serviceCluster, `/catalog/v2beta1/rules/{{.Ruleresource}}/actions`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb []Action
	err = util.ParseResponse(&rb, response)
	return rb, err
}

/*
ListAnnotations - catalog service endpoint
Returns the set of annotations across all objects.
Parameters:

	query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ListAnnotations(query *ListAnnotationsQueryParams, resp ...*http.Response) ([]Annotation, error) {
	values := util.ParseURLParams(query)
	u, err := s.Client.BuildURLFromPathParams(values, serviceCluster, `/catalog/v2beta1/annotations`, nil)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb []Annotation
	err = util.ParseResponse(&rb, response)
	return rb, err
}

/*
ListAnnotationsForDashboard - catalog service endpoint
Returns the set of annotations that are associated with the specified dashboard.
Parameters:

	dashboardresource: ID or the resource name of a dashvboard. The resource name format is module.dashboardname.
	query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ListAnnotationsForDashboard(dashboardresource string, query *ListAnnotationsForDashboardQueryParams, resp ...*http.Response) ([]Annotation, error) {
	values := util.ParseURLParams(query)
	pp := struct {
		Dashboardresource string
	}{
		Dashboardresource: dashboardresource,
	}
	u, err := s.Client.BuildURLFromPathParams(values, serviceCluster, `/catalog/v2beta1/dashboards/{{.Dashboardresource}}/annotations`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb []Annotation
	err = util.ParseResponse(&rb, response)
	return rb, err
}

/*
ListAnnotationsForDataset - catalog service endpoint
Returns the set of annotations that are associated with the specified dataset.
Parameters:

	datasetresource: ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
	query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ListAnnotationsForDataset(datasetresource string, query *ListAnnotationsForDatasetQueryParams, resp ...*http.Response) ([]Annotation, error) {
	values := util.ParseURLParams(query)
	pp := struct {
		Datasetresource string
	}{
		Datasetresource: datasetresource,
	}
	u, err := s.Client.BuildURLFromPathParams(values, serviceCluster, `/catalog/v2beta1/datasets/{{.Datasetresource}}/annotations`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb []Annotation
	err = util.ParseResponse(&rb, response)
	return rb, err
}

/*
ListDashboards - catalog service endpoint
Returns a list of dashboards.
Parameters:

	query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ListDashboards(query *ListDashboardsQueryParams, resp ...*http.Response) ([]Dashboard, error) {
	values := util.ParseURLParams(query)
	u, err := s.Client.BuildURLFromPathParams(values, serviceCluster, `/catalog/v2beta1/dashboards`, nil)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb []Dashboard
	err = util.ParseResponse(&rb, response)
	return rb, err
}

/*
ListDatasets - catalog service endpoint
Returns a list of all datasets. Use a filter to return a specific list of datasets.
Parameters:

	query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ListDatasets(query *ListDatasetsQueryParams, resp ...*http.Response) ([]DatasetGet, error) {
	values := util.ParseURLParams(query)
	u, err := s.Client.BuildURLFromPathParams(values, serviceCluster, `/catalog/v2beta1/datasets`, nil)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb []DatasetGet
	err = util.ParseResponse(&rb, response)
	return rb, err
}

/*
ListFields - catalog service endpoint
Returns a list of all of the fields in the Metadata Catalog.
Parameters:

	query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ListFields(query *ListFieldsQueryParams, resp ...*http.Response) ([]Field, error) {
	values := util.ParseURLParams(query)
	u, err := s.Client.BuildURLFromPathParams(values, serviceCluster, `/catalog/v2beta1/fields`, nil)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb []Field
	err = util.ParseResponse(&rb, response)
	return rb, err
}

/*
ListFieldsForDataset - catalog service endpoint
Returns the set of fields for the dataset with the specified ID or resource name.
Parameters:

	datasetresource: ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
	query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ListFieldsForDataset(datasetresource string, query *ListFieldsForDatasetQueryParams, resp ...*http.Response) ([]Field, error) {
	values := util.ParseURLParams(query)
	pp := struct {
		Datasetresource string
	}{
		Datasetresource: datasetresource,
	}
	u, err := s.Client.BuildURLFromPathParams(values, serviceCluster, `/catalog/v2beta1/datasets/{{.Datasetresource}}/fields`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb []Field
	err = util.ParseResponse(&rb, response)
	return rb, err
}

/*
ListModules - catalog service endpoint
Returns a list of all modules. Use a filter to return a specific list of modules.
Parameters:

	query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ListModules(query *ListModulesQueryParams, resp ...*http.Response) ([]Module, error) {
	values := util.ParseURLParams(query)
	u, err := s.Client.BuildURLFromPathParams(values, serviceCluster, `/catalog/v2beta1/modules`, nil)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb []Module
	err = util.ParseResponse(&rb, response)
	return rb, err
}

/*
ListRelationships - catalog service endpoint
Returns a list of all relationships. Use a filter to return a specific list of relationships.
Parameters:

	query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ListRelationships(query *ListRelationshipsQueryParams, resp ...*http.Response) ([]Relationship, error) {
	values := util.ParseURLParams(query)
	u, err := s.Client.BuildURLFromPathParams(values, serviceCluster, `/catalog/v2beta1/relationships`, nil)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb []Relationship
	err = util.ParseResponse(&rb, response)
	return rb, err
}

/*
ListRules - catalog service endpoint
Returns a list of rules that match a filter, if specified, otherwise returns all rules.
Parameters:

	query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ListRules(query *ListRulesQueryParams, resp ...*http.Response) ([]Rule, error) {
	values := util.ParseURLParams(query)
	u, err := s.Client.BuildURLFromPathParams(values, serviceCluster, `/catalog/v2beta1/rules`, nil)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb []Rule
	err = util.ParseResponse(&rb, response)
	return rb, err
}

/*
UpdateActionByIdForRule - catalog service endpoint
Modifies the action with the specified ID that is associated with the specified rule.
Parameters:

	ruleresource: The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
	actionid: ID of an Action.
	actionPatch: The properties to update in the specified action.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) UpdateActionByIdForRule(ruleresource string, actionid string, actionPatch ActionPatch, resp ...*http.Response) (*Action, error) {
	pp := struct {
		Ruleresource string
		Actionid     string
	}{
		Ruleresource: ruleresource,
		Actionid:     actionid,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/catalog/v2beta1/rules/{{.Ruleresource}}/actions/{{.Actionid}}`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Patch(services.RequestParams{URL: u, Body: actionPatch})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb Action
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
UpdateDashboard - catalog service endpoint
Modifies the dashboard with the specified ID or resource name.
Parameters:

	dashboardresource: ID or the resource name of a dashvboard. The resource name format is module.dashboardname.
	dashboardPatch: An updated representation of the dashboard to be persisted.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) UpdateDashboard(dashboardresource string, dashboardPatch DashboardPatch, resp ...*http.Response) (*Dashboard, error) {
	pp := struct {
		Dashboardresource string
	}{
		Dashboardresource: dashboardresource,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/catalog/v2beta1/dashboards/{{.Dashboardresource}}`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Patch(services.RequestParams{URL: u, Body: dashboardPatch})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb Dashboard
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
UpdateDataset - catalog service endpoint
Modifies the dataset with the specified Dataset ID or Resource Name. For the default module, the resource name format is datasetName, otherwise, the resource name format is module.datasetName.
Parameters:

	datasetresource: ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
	datasetPatch: An updated representation of the dataset to be persisted.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) UpdateDataset(datasetresource string, datasetPatch DatasetPatch, resp ...*http.Response) (*Dataset, error) {
	pp := struct {
		Datasetresource string
	}{
		Datasetresource: datasetresource,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/catalog/v2beta1/datasets/{{.Datasetresource}}`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Patch(services.RequestParams{URL: u, Body: datasetPatch})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb Dataset
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
UpdateFieldByIdForDataset - catalog service endpoint
Modifies the field with the specified ID that is part of the specified dataset.
Parameters:

	datasetresource: ID of a Dataset or the resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
	fieldid: ID of a Field.
	fieldPatch: The properties to update in the specified field, or the requesting user lacks catalog.datasets.read permission for them.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) UpdateFieldByIdForDataset(datasetresource string, fieldid string, fieldPatch FieldPatch, resp ...*http.Response) (*Field, error) {
	pp := struct {
		Datasetresource string
		Fieldid         string
	}{
		Datasetresource: datasetresource,
		Fieldid:         fieldid,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/catalog/v2beta1/datasets/{{.Datasetresource}}/fields/{{.Fieldid}}`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Patch(services.RequestParams{URL: u, Body: fieldPatch})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb Field
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
UpdateRelationshipById - catalog service endpoint
Modifies the relationship with the specified relationship ID.
Parameters:

	relationshipid: ID of a relationship.
	relationshipPatch: The properties to update in the specified relationship.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) UpdateRelationshipById(relationshipid string, relationshipPatch RelationshipPatch, resp ...*http.Response) (*Relationship, error) {
	pp := struct {
		Relationshipid string
	}{
		Relationshipid: relationshipid,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/catalog/v2beta1/relationships/{{.Relationshipid}}`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Patch(services.RequestParams{URL: u, Body: relationshipPatch})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb Relationship
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
UpdateRule - catalog service endpoint
Modifies the rule with the specified rule ID or resource name.
Parameters:

	ruleresource: The ID or resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
	rulePatch: The properties to update in the specified rule.
	resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) UpdateRule(ruleresource string, rulePatch RulePatch, resp ...*http.Response) (*Rule, error) {
	pp := struct {
		Ruleresource string
	}{
		Ruleresource: ruleresource,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/catalog/v2beta1/rules/{{.Ruleresource}}`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Patch(services.RequestParams{URL: u, Body: rulePatch})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb Rule
	err = util.ParseResponse(&rb, response)
	return &rb, err
}
