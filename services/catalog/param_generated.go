/*
 * Copyright Â© 2022 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Search Catalog service
 *
 * With the Metadata Catalog in Splunk Cloud Services you can create and manage knowledge objects such as datasets, fields, rules, actions, and dashboards.
 *
 * API version: v2beta1.4 (recommended default)
 * Generated by: OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
 */

package catalog

// GetDatasetQueryParams represents valid query parameters for the GetDataset operation
// For convenience GetDatasetQueryParams can be formed in a single statement, for example:
//     `v := GetDatasetQueryParams{}.SetMaxstale(...)`
type GetDatasetQueryParams struct {
	// Maxstale : The number of seconds beyond which we will refresh index metadata.
	Maxstale *int32 `key:"maxstale"`
}

func (q GetDatasetQueryParams) SetMaxstale(v int32) GetDatasetQueryParams {
	q.Maxstale = &v
	return q
}

// ListActionsForRuleQueryParams represents valid query parameters for the ListActionsForRule operation
// For convenience ListActionsForRuleQueryParams can be formed in a single statement, for example:
//     `v := ListActionsForRuleQueryParams{}.SetCount(...).SetFilter(...).SetOffset(...).SetOrderby(...)`
type ListActionsForRuleQueryParams struct {
	// Count : The maximum number of results to return.
	Count *int32 `key:"count"`
	// Filter : A filter to apply to the results list. The filter must be a SPL predicate expression.
	Filter string `key:"filter"`
	// Offset : The number of results to skip before the first one returned.
	Offset *int32 `key:"offset"`
	// Orderby : A list of fields to order the results by.  You can specify either ascending or descending order using \&quot;&lt;field&gt; asc\&quot; or \&quot;&lt;field&gt; desc.  Ascending order is the default.
	Orderby []string `key:"orderby"`
}

func (q ListActionsForRuleQueryParams) SetCount(v int32) ListActionsForRuleQueryParams {
	q.Count = &v
	return q
}

func (q ListActionsForRuleQueryParams) SetFilter(v string) ListActionsForRuleQueryParams {
	q.Filter = v
	return q
}

func (q ListActionsForRuleQueryParams) SetOffset(v int32) ListActionsForRuleQueryParams {
	q.Offset = &v
	return q
}

func (q ListActionsForRuleQueryParams) SetOrderby(v []string) ListActionsForRuleQueryParams {
	q.Orderby = v
	return q
}

// ListAnnotationsQueryParams represents valid query parameters for the ListAnnotations operation
// For convenience ListAnnotationsQueryParams can be formed in a single statement, for example:
//     `v := ListAnnotationsQueryParams{}.SetCount(...).SetFilter(...).SetOffset(...).SetOrderby(...)`
type ListAnnotationsQueryParams struct {
	// Count : The maximum number of results to return.
	Count *int32 `key:"count"`
	// Filter : A filter to apply to the results list. The filter must be a SPL predicate expression.
	Filter string `key:"filter"`
	// Offset : The number of results to skip before the first one returned.
	Offset *int32 `key:"offset"`
	// Orderby : A list of fields to order the results by.  You can specify either ascending or descending order using \&quot;&lt;field&gt; asc\&quot; or \&quot;&lt;field&gt; desc.  Ascending order is the default.
	Orderby []string `key:"orderby"`
}

func (q ListAnnotationsQueryParams) SetCount(v int32) ListAnnotationsQueryParams {
	q.Count = &v
	return q
}

func (q ListAnnotationsQueryParams) SetFilter(v string) ListAnnotationsQueryParams {
	q.Filter = v
	return q
}

func (q ListAnnotationsQueryParams) SetOffset(v int32) ListAnnotationsQueryParams {
	q.Offset = &v
	return q
}

func (q ListAnnotationsQueryParams) SetOrderby(v []string) ListAnnotationsQueryParams {
	q.Orderby = v
	return q
}

// ListAnnotationsForDashboardQueryParams represents valid query parameters for the ListAnnotationsForDashboard operation
// For convenience ListAnnotationsForDashboardQueryParams can be formed in a single statement, for example:
//     `v := ListAnnotationsForDashboardQueryParams{}.SetFilter(...)`
type ListAnnotationsForDashboardQueryParams struct {
	// Filter : A filter query to apply to the annotations.
	Filter string `key:"filter"`
}

func (q ListAnnotationsForDashboardQueryParams) SetFilter(v string) ListAnnotationsForDashboardQueryParams {
	q.Filter = v
	return q
}

// ListAnnotationsForDatasetQueryParams represents valid query parameters for the ListAnnotationsForDataset operation
// For convenience ListAnnotationsForDatasetQueryParams can be formed in a single statement, for example:
//     `v := ListAnnotationsForDatasetQueryParams{}.SetCount(...).SetFilter(...).SetOffset(...).SetOrderby(...)`
type ListAnnotationsForDatasetQueryParams struct {
	// Count : The maximum number of results to return.
	Count *int32 `key:"count"`
	// Filter : A filter to apply to the results list. The filter must be a SPL predicate expression.
	Filter string `key:"filter"`
	// Offset : The number of results to skip before the first one returned.
	Offset *int32 `key:"offset"`
	// Orderby : A list of fields to order the results by.  You can specify either ascending or descending order using \&quot;&lt;field&gt; asc\&quot; or \&quot;&lt;field&gt; desc.  Ascending order is the default.
	Orderby []string `key:"orderby"`
}

func (q ListAnnotationsForDatasetQueryParams) SetCount(v int32) ListAnnotationsForDatasetQueryParams {
	q.Count = &v
	return q
}

func (q ListAnnotationsForDatasetQueryParams) SetFilter(v string) ListAnnotationsForDatasetQueryParams {
	q.Filter = v
	return q
}

func (q ListAnnotationsForDatasetQueryParams) SetOffset(v int32) ListAnnotationsForDatasetQueryParams {
	q.Offset = &v
	return q
}

func (q ListAnnotationsForDatasetQueryParams) SetOrderby(v []string) ListAnnotationsForDatasetQueryParams {
	q.Orderby = v
	return q
}

// ListDashboardsQueryParams represents valid query parameters for the ListDashboards operation
// For convenience ListDashboardsQueryParams can be formed in a single statement, for example:
//     `v := ListDashboardsQueryParams{}.SetCount(...).SetFilter(...).SetOffset(...).SetOrderby(...)`
type ListDashboardsQueryParams struct {
	// Count : The maximum number of results to return.
	Count *int32 `key:"count"`
	// Filter : A filter to apply to the results list. The filter must be a SPL predicate expression.
	Filter string `key:"filter"`
	// Offset : The number of results to skip before the first one returned.
	Offset *int32 `key:"offset"`
	// Orderby : A list of fields to order the results by.  You can specify either ascending or descending order using \&quot;&lt;field&gt; asc\&quot; or \&quot;&lt;field&gt; desc.  Ascending order is the default.
	Orderby []string `key:"orderby"`
}

func (q ListDashboardsQueryParams) SetCount(v int32) ListDashboardsQueryParams {
	q.Count = &v
	return q
}

func (q ListDashboardsQueryParams) SetFilter(v string) ListDashboardsQueryParams {
	q.Filter = v
	return q
}

func (q ListDashboardsQueryParams) SetOffset(v int32) ListDashboardsQueryParams {
	q.Offset = &v
	return q
}

func (q ListDashboardsQueryParams) SetOrderby(v []string) ListDashboardsQueryParams {
	q.Orderby = v
	return q
}

// ListDatasetsQueryParams represents valid query parameters for the ListDatasets operation
// For convenience ListDatasetsQueryParams can be formed in a single statement, for example:
//     `v := ListDatasetsQueryParams{}.SetCount(...).SetFilter(...).SetMaxstale(...).SetOffset(...).SetOrderby(...)`
type ListDatasetsQueryParams struct {
	// Count : The maximum number of results to return.
	Count *int32 `key:"count"`
	// Filter : A filter to apply to the dataset list. The filter must be a SPL predicate expression.
	Filter string `key:"filter"`
	// Maxstale : The number of seconds beyond which we will refresh index metadata.
	Maxstale *int32 `key:"maxstale"`
	// Offset : The number of results to skip before the first result is returned.
	Offset *int32 `key:"offset"`
	// Orderby : A list of fields to order the results by.  You can specify either ascending or descending order using \&quot;&lt;field&gt; asc\&quot; or \&quot;&lt;field&gt; desc\&quot;.  Ascending order is the default.
	Orderby []string `key:"orderby"`
}

func (q ListDatasetsQueryParams) SetCount(v int32) ListDatasetsQueryParams {
	q.Count = &v
	return q
}

func (q ListDatasetsQueryParams) SetFilter(v string) ListDatasetsQueryParams {
	q.Filter = v
	return q
}

func (q ListDatasetsQueryParams) SetMaxstale(v int32) ListDatasetsQueryParams {
	q.Maxstale = &v
	return q
}

func (q ListDatasetsQueryParams) SetOffset(v int32) ListDatasetsQueryParams {
	q.Offset = &v
	return q
}

func (q ListDatasetsQueryParams) SetOrderby(v []string) ListDatasetsQueryParams {
	q.Orderby = v
	return q
}

// ListFieldsQueryParams represents valid query parameters for the ListFields operation
// For convenience ListFieldsQueryParams can be formed in a single statement, for example:
//     `v := ListFieldsQueryParams{}.SetCount(...).SetFilter(...).SetOffset(...).SetOrderby(...)`
type ListFieldsQueryParams struct {
	// Count : The maximum number of results to return.
	Count *int32 `key:"count"`
	// Filter : A filter to apply to the dataset list. The filter must be a SPL predicate expression.
	Filter string `key:"filter"`
	// Offset : The number of results to skip before the first one returned.
	Offset *int32 `key:"offset"`
	// Orderby : A list of fields to order the results by.  You can specify either ascending or descending order using \&quot;&lt;field&gt; asc\&quot; or \&quot;&lt;field&gt; desc.  Ascending order is the default.
	Orderby []string `key:"orderby"`
}

func (q ListFieldsQueryParams) SetCount(v int32) ListFieldsQueryParams {
	q.Count = &v
	return q
}

func (q ListFieldsQueryParams) SetFilter(v string) ListFieldsQueryParams {
	q.Filter = v
	return q
}

func (q ListFieldsQueryParams) SetOffset(v int32) ListFieldsQueryParams {
	q.Offset = &v
	return q
}

func (q ListFieldsQueryParams) SetOrderby(v []string) ListFieldsQueryParams {
	q.Orderby = v
	return q
}

// ListFieldsForDatasetQueryParams represents valid query parameters for the ListFieldsForDataset operation
// For convenience ListFieldsForDatasetQueryParams can be formed in a single statement, for example:
//     `v := ListFieldsForDatasetQueryParams{}.SetCount(...).SetFilter(...).SetOffset(...).SetOrderby(...)`
type ListFieldsForDatasetQueryParams struct {
	// Count : The maximum number of results to return.
	Count *int32 `key:"count"`
	// Filter : A filter to apply to the dataset list. The filter must be a SPL predicate expression.
	Filter string `key:"filter"`
	// Offset : The number of results to skip before the first one returned.
	Offset *int32 `key:"offset"`
	// Orderby : A list of fields to order the results by. You can specify either ascending or descending order using \&quot;&lt;field&gt; asc\&quot; or \&quot;&lt;field&gt; desc.  Ascending order is the default.
	Orderby []string `key:"orderby"`
}

func (q ListFieldsForDatasetQueryParams) SetCount(v int32) ListFieldsForDatasetQueryParams {
	q.Count = &v
	return q
}

func (q ListFieldsForDatasetQueryParams) SetFilter(v string) ListFieldsForDatasetQueryParams {
	q.Filter = v
	return q
}

func (q ListFieldsForDatasetQueryParams) SetOffset(v int32) ListFieldsForDatasetQueryParams {
	q.Offset = &v
	return q
}

func (q ListFieldsForDatasetQueryParams) SetOrderby(v []string) ListFieldsForDatasetQueryParams {
	q.Orderby = v
	return q
}

// ListModulesQueryParams represents valid query parameters for the ListModules operation
// For convenience ListModulesQueryParams can be formed in a single statement, for example:
//     `v := ListModulesQueryParams{}.SetFilter(...)`
type ListModulesQueryParams struct {
	// Filter : A filter to apply to the modules.
	Filter string `key:"filter"`
}

func (q ListModulesQueryParams) SetFilter(v string) ListModulesQueryParams {
	q.Filter = v
	return q
}

// ListRelationshipsQueryParams represents valid query parameters for the ListRelationships operation
// For convenience ListRelationshipsQueryParams can be formed in a single statement, for example:
//     `v := ListRelationshipsQueryParams{}.SetCount(...).SetFilter(...).SetOffset(...).SetOrderby(...)`
type ListRelationshipsQueryParams struct {
	// Count : The maximum number of results to return.
	Count *int32 `key:"count"`
	// Filter : A filter to apply to the results list. The filter must be a SPL predicate expression.
	Filter string `key:"filter"`
	// Offset : The number of results to skip before the first one returned.
	Offset *int32 `key:"offset"`
	// Orderby : A list of fields to order the results by.  You can specify either ascending or descending order using \&quot;&lt;field&gt; asc\&quot; or \&quot;&lt;field&gt; desc.  Ascending order is the default.
	Orderby []string `key:"orderby"`
}

func (q ListRelationshipsQueryParams) SetCount(v int32) ListRelationshipsQueryParams {
	q.Count = &v
	return q
}

func (q ListRelationshipsQueryParams) SetFilter(v string) ListRelationshipsQueryParams {
	q.Filter = v
	return q
}

func (q ListRelationshipsQueryParams) SetOffset(v int32) ListRelationshipsQueryParams {
	q.Offset = &v
	return q
}

func (q ListRelationshipsQueryParams) SetOrderby(v []string) ListRelationshipsQueryParams {
	q.Orderby = v
	return q
}

// ListRulesQueryParams represents valid query parameters for the ListRules operation
// For convenience ListRulesQueryParams can be formed in a single statement, for example:
//     `v := ListRulesQueryParams{}.SetCount(...).SetFilter(...).SetOffset(...).SetOrderby(...)`
type ListRulesQueryParams struct {
	// Count : The maximum number of results to return.
	Count *int32 `key:"count"`
	// Filter : A filter to apply to the results list. The filter must be a SPL predicate expression.
	Filter string `key:"filter"`
	// Offset : The number of results to skip before the first one returned.
	Offset *int32 `key:"offset"`
	// Orderby : A list of fields to order the results by.  You can specify either ascending or descending order using \&quot;&lt;field&gt; asc\&quot; or \&quot;&lt;field&gt; desc.  Ascending order is the default.
	Orderby []string `key:"orderby"`
}

func (q ListRulesQueryParams) SetCount(v int32) ListRulesQueryParams {
	q.Count = &v
	return q
}

func (q ListRulesQueryParams) SetFilter(v string) ListRulesQueryParams {
	q.Filter = v
	return q
}

func (q ListRulesQueryParams) SetOffset(v int32) ListRulesQueryParams {
	q.Offset = &v
	return q
}

func (q ListRulesQueryParams) SetOrderby(v []string) ListRulesQueryParams {
	q.Orderby = v
	return q
}
